* ChangeLog

** DONE Which web framework? Spock, Yesod, Snap, Scotty, Servant?
CLOSED: [2016-10-26 Wed 08:20]
Spock looks like the easier to understand, although changed my mind because Servant looks more interesting for APIs.

** DONE Which templating library? Lucid, Heist, blaze-html, hamlet?
CLOSED: [2016-10-27 Thu 08:20]
I'll start with Lucid, although no big opinion on that.
https://github.com/haskell-servant/servant/issues/297

** DONE Servant and blaze
CLOSED: [2016-10-27 Thu 08:20]
https://github.com/haskell-servant/servant/issues/195#issuecomment-132141660

** DONE Hello World with servant
CLOSED: [2016-10-27 Thu 08:18]
https://github.com/mietek/hello-servant/blob/master/Main.hs

** DONE DB library
CLOSED: [2016-11-09 Wed 08:09]
It looks like Persistent would be a good starting point. There is also an example http://www.parsonsmatt.org/2015/06/07/servant-persistent.html
Other alternatives: opaleye and acid-state

** DONE how to server static content
CLOSED: [2016-10-27 Thu 08:18]
serveDirectory https://haskell-servant.github.io/tutorial/0.4/server.html
or nginx?


** DONE basic CRUD API operations
CLOSED: [2016-11-09 Wed 18:36]
** DONE handle API error cases (entity not found)
CLOSED: [2016-11-09 Wed 18:36]
** DONE interview as a set of questions
CLOSED: [2016-11-10 Thu 08:31]
** TODO interview application
** TODO cascade remove (interview -> question)
** TODO elm UI + servant API

* Features
** TODO testing
** TODO swagger
** TODO signup
** TODO start coding
** TODO create an interview
** TODO / -> index.html, /create/ -> create.html
** TODO save and invite candidateso





** TODO create dashboard

* to check
** TODO purescript + servant API
** TODO auto reload files?
** TODO deploy to heroku
https://haskellonheroku.com/tutorial/
** DONE how to do redirections? wai app? or servant and setting the Header location field.
CLOSED: [2016-11-04 Fri 08:30]

-- createPostHandler =
--   throwError (err301 { errHeaders = [("Location", "/dashboard.html")]})

** DONE urlencoded body
CLOSED: [2016-11-04 Fri 08:28]
data User = User
  { email :: Text
  , password :: Text
  } deriving (Eq, Show)

instance FromFormUrlEncoded User where
  fromFormUrlEncoded inputs =
    User <$> lkp "email" <*> lkp "password"

    where lkp input_label = case lookup input_label inputs of
                 Nothing -> Left $ unpack $ "label " <> input_label <> " not found"
                 Just v    -> Right v

type API = "login" :> ReqBody '[FormUrlEncoded] User :> Post '[HTML] Html

** DONE dynamic parameters? can these be omitted?
CLOSED: [2016-11-04 Fri 08:29]
Yes, when unserializing parameters, just get the fields you are interested in.
** TODO list of elements in form body (arrays in PHP)
Manual parsing I guess.
** TODO Generics extension
** TODO digestive functors
** TODO how to User <$> lkp "email" <*> lkp "password" with different types
** TODO what are these operators <$> and <*>
** TODO regexp
** TODO servant web sockets
** TODO CSRF tokens?
** TODO HTTPS?
** TODO CSS
** TODO servant as a web micro framework? If not, what would be the best companion? Yesod not so micro? Wai directly?** TODO purescript + servant API** TODO purescript + servant API** TODO purescript + servant API** TODO purescript + servant API** TODO purescript + servant API** TODO purescript + servant API** TODO purescript + servant API
** TODO Auth
** TODO Servant template (logging, auth, monitoring, etc.)
** TODO generating safe random number inside a do bloc
** TODO Esqueleto


* Observations
** Missing examples: FormUrlEncoded
** Sometimes cryptic error messages. Not clear where is the issue in the API
** Compile - Run - Browser loop is a bit slow
** RegExp issues with ambiguous types
** What to use? String, Text or ByteString? (pack, unpack)?
* Links
** Example servant + acidstate: Latexpad
https://github.com/alvare/latexpad
https://github.com/haskell-servant/servant/issues/236
** Text to String to ByteString
unpack, pack, function name collisions
