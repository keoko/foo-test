// Generated by psc version 0.8.5.0

/**
 *  | This module provides a low-level wrapper for the Node Stream API.
 */
"use strict";
var $foreign = require("./foreign");
var Prelude = require("../Prelude");
var Control_Bind = require("../Control.Bind");
var Data_Either = require("../Data.Either");
var Node_Encoding = require("../Node.Encoding");
var Node_Buffer_1 = require("../Node.Buffer");
var Node_Buffer_1 = require("../Node.Buffer");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Control_Monad_Eff_Unsafe = require("../Control.Monad.Eff.Unsafe");

/**
 *  | Write a string in the specified encoding to a writable stream.
 */
var writeString = function (w) {
    return function (enc) {
        return $foreign.writeStringImpl(w)(Prelude.show(Node_Encoding.showEncoding)(enc));
    };
};

/**
 *  | Set the encoding used to read chunks as strings from the stream. This
 *  | function may be useful when you are passing a readable stream to some other
 *  | JavaScript library, which already expects an encoding to be set.
 *  |
 *  | Where possible, you should try to use `onDataString` instead of this
 *  | function.
 */
var setEncoding = function (r) {
    return function (enc) {
        return $foreign.setEncodingImpl(r)(Prelude.show(Node_Encoding.showEncoding)(enc));
    };
};

/**
 *  | Set the default encoding used to write strings to the stream. This function
 *  | is useful when you are passing a writable stream to some other JavaScript
 *  | library, which already expects a default encoding to be set. It has no
 *  | effect on the behaviour of the `writeString` function (because that
 *  | function ensures that the encoding is always supplied explicitly).
 */
var setDefaultEncoding = function (r) {
    return function (enc) {
        return $foreign.setDefaultEncodingImpl(r)(Prelude.show(Node_Encoding.showEncoding)(enc));
    };
};

/**
 *  | Listen for `data` events, returning data in an `Either String Buffer`. This
 *  | function is provided for the (hopefully rare) case that `setEncoding` has
 *  | been called on the stream.
 */
var onDataEither = $foreign.onDataEitherImpl(Data_Either.Left.create)(Data_Either.Right.create);

/**
 *  | Listen for `data` events, returning data in a Buffer. Note that this will fail
 *  | if `setEncoding` has been called on the stream.
 */
var onData = function (r) {
    return function (cb) {
        var fromEither = function (x) {
            if (x instanceof Data_Either.Left) {
                return Control_Monad_Eff_Exception["throw"]("Node.Stream.onData: Stream encoding should not be set");
            };
            if (x instanceof Data_Either.Right) {
                return Prelude.pure(Control_Monad_Eff.applicativeEff)(x.value0);
            };
            throw new Error("Failed pattern match at Node.Stream line 71, column 5 - line 80, column 1: " + [ x.constructor.name ]);
        };
        return onDataEither(r)(Control_Bind["<=<"](Control_Monad_Eff.bindEff)(cb)(fromEither));
    };
};

/**
 *  | Listen for `data` events, returning data in a String, which will be
 *  | decoded using the given encoding. Note that this will fail if `setEncoding`
 *  | has been called on the stream.
 */
var onDataString = function (r) {
    return function (enc) {
        return function (cb) {
            return onData(r)(Control_Bind["<=<"](Control_Monad_Eff.bindEff)(cb)(function ($3) {
                return Control_Monad_Eff_Unsafe.unsafeInterleaveEff(Node_Buffer_1.toString(enc)($3));
            }));
        };
    };
};
module.exports = {
    setDefaultEncoding: setDefaultEncoding, 
    writeString: writeString, 
    setEncoding: setEncoding, 
    onDataEither: onDataEither, 
    onDataString: onDataString, 
    onData: onData, 
    end: $foreign.end, 
    uncork: $foreign.uncork, 
    cork: $foreign.cork, 
    write: $foreign.write, 
    pipe: $foreign.pipe, 
    isPaused: $foreign.isPaused, 
    pause: $foreign.pause, 
    resume: $foreign.resume, 
    onError: $foreign.onError, 
    onClose: $foreign.onClose, 
    onEnd: $foreign.onEnd
};
