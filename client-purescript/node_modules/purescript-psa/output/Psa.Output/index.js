// Generated by psc version 0.8.5.0
"use strict";
var Prelude = require("../Prelude");
var Data_Foldable = require("../Data.Foldable");
var Data_Maybe = require("../Data.Maybe");
var Data_Tuple = require("../Data.Tuple");
var Data_Set = require("../Data.Set");
var Data_String = require("../Data.String");
var Data_StrMap = require("../Data.StrMap");
var Data_Array = require("../Data.Array");
var Node_Path = require("../Node.Path");
var Psa_Types = require("../Psa.Types");
var $$Error = (function () {
    function Error() {

    };
    Error.value = new Error();
    return Error;
})();
var Warning = (function () {
    function Warning() {

    };
    Warning.value = new Warning();
    return Warning;
})();
var trimPosition = function (__copy_lines) {
    return function (__copy_pos) {
        var lines = __copy_lines;
        var pos = __copy_pos;
        tco: while (true) {
            var isPunc = function (v) {
                if (v === " ") {
                    return true;
                };
                if (v === ",") {
                    return true;
                };
                return false;
            };
            var trimComment = function (col) {
                return function (l) {
                    var $26 = Data_String.indexOf("--")(l);
                    if ($26 instanceof Data_Maybe.Just && $26.value0 === 0) {
                        return Data_Maybe.Nothing.value;
                    };
                    if ($26 instanceof Data_Maybe.Just && $26.value0 < col - 1) {
                        return trimCol($26.value0 + 1 | 0)(l);
                    };
                    return new Data_Maybe.Just(col);
                };
            };
            var trimCol = function (__copy_col) {
                return function (__copy_l) {
                    var col = __copy_col;
                    var l = __copy_l;
                    tco: while (true) {
                        var $29 = Data_String.charAt(col - 2)(l);
                        if ($29 instanceof Data_Maybe.Just && isPunc($29.value0)) {
                            var __tco_col = col - 1;
                            var __tco_l = l;
                            col = __tco_col;
                            l = __tco_l;
                            continue tco;
                        };
                        if ($29 instanceof Data_Maybe.Just) {
                            return trimComment(col)(l);
                        };
                        return Data_Maybe.Nothing.value;
                    };
                };
            };
            var trimPos = function (__copy_v) {
                var v = __copy_v;
                tco: while (true) {
                    if (v.col <= 1) {
                        var $33 = Data_Array.index(lines)(v.row - pos.startLine - 1);
                        if ($33 instanceof Data_Maybe.Just) {
                            var __tco_v = {
                                row: v.row - 1, 
                                col: Data_String.length($33.value0) + 1 | 0
                            };
                            v = __tco_v;
                            continue tco;
                        };
                        return Data_Maybe.Nothing.value;
                    };
                    if (Prelude.otherwise) {
                        var $35 = Data_Array.index(lines)(v.row - pos.startLine);
                        if ($35 instanceof Data_Maybe.Just) {
                            var $36 = trimCol(v.col)($35.value0);
                            if ($36 instanceof Data_Maybe.Just) {
                                return new Data_Maybe.Just({
                                    row: v.row, 
                                    col: $36.value0
                                });
                            };
                            if ($36 instanceof Data_Maybe.Nothing) {
                                var __tco_v = {
                                    row: v.row, 
                                    col: 1
                                };
                                v = __tco_v;
                                continue tco;
                            };
                            throw new Error("Failed pattern match at Psa.Output line 223, column 11 - line 227, column 9: " + [ $36.constructor.name ]);
                        };
                        return Data_Maybe.Nothing.value;
                    };
                    throw new Error("Failed pattern match at Psa.Output line 192, column 1 - line 248, column 1: " + [ v.constructor.name ]);
                };
            };
            if (lines.length === 0) {
                return {
                    startLine: pos.startLine, 
                    startColumn: pos.startColumn, 
                    endLine: pos.startLine, 
                    endColumn: pos.startColumn
                };
            };
            if (lines.length === 1) {
                var $42 = trimCol(pos.endColumn)(lines[0]);
                if ($42 instanceof Data_Maybe.Just) {
                    var $43 = {};
                    for (var $44 in pos) {
                        if (pos.hasOwnProperty($44)) {
                            $43[$44] = pos[$44];
                        };
                    };
                    $43.endLine = pos.startLine;
                    $43.endColumn = $42.value0;
                    return $43;
                };
                if ($42 instanceof Data_Maybe.Nothing) {
                    var $46 = {};
                    for (var $47 in pos) {
                        if (pos.hasOwnProperty($47)) {
                            $46[$47] = pos[$47];
                        };
                    };
                    $46.endLine = pos.startLine;
                    $46.endColumn = pos.startColumn;
                    return $46;
                };
                throw new Error("Failed pattern match at Psa.Output line 202, column 7 - line 206, column 5: " + [ $42.constructor.name ]);
            };
            var $49 = trimPos({
                row: pos.endLine, 
                col: pos.endColumn
            });
            if ($49 instanceof Data_Maybe.Just) {
                var $50 = {};
                for (var $51 in pos) {
                    if (pos.hasOwnProperty($51)) {
                        $50[$51] = pos[$51];
                    };
                };
                $50.endLine = $49.value0.row;
                $50.endColumn = $49.value0.col;
                return $50;
            };
            if ($49 instanceof Data_Maybe.Nothing) {
                var __tco_lines = [  ];
                var __tco_pos = pos;
                lines = __tco_lines;
                pos = __tco_pos;
                continue tco;
            };
            throw new Error("Failed pattern match at Psa.Output line 207, column 7 - line 211, column 3: " + [ $49.constructor.name ]);
        };
    };
};

/**
 *  | Trims extraneous whitespace from psc error messages.
 */
var trimMessage = (function () {
    var dedent = function (v) {
        return function (l) {
            if (l === "") {
                return {
                    lines: Data_Array.snoc(v.lines)(l), 
                    indent: v.indent
                };
            };
            if (Prelude.otherwise) {
                var indent$prime = Data_String.length(Data_String.takeWhile(function (v1) {
                    return v1 === " ";
                })(l));
                var $57 = indent$prime < v.indent;
                if ($57) {
                    return {
                        lines: Data_Array.snoc(v.lines)(Data_String.drop(indent$prime)(l)), 
                        indent: indent$prime
                    };
                };
                if (!$57) {
                    return {
                        lines: Data_Array.snoc(v.lines)(Data_String.drop(v.indent)(l)), 
                        indent: v.indent
                    };
                };
                throw new Error("Failed pattern match at Psa.Output line 262, column 7 - line 266, column 3: " + [ $57.constructor.name ]);
            };
            throw new Error("Failed pattern match at Psa.Output line 266, column 3 - line 269, column 45: " + [ v.constructor.name, l.constructor.name ]);
        };
    };
    var collapse = function (lines) {
        return function (l) {
            var $60 = Data_Array.last(lines);
            if ($60 instanceof Data_Maybe.Just && ($60.value0 === "" && l === "")) {
                return lines;
            };
            return Data_Array.snoc(lines)(l);
        };
    };
    return function ($118) {
        return (function ($119) {
            return (function ($120) {
                return Data_String.trim(Data_String.joinWith("\n")($120));
            })(Data_Foldable.foldl(Data_Foldable.foldableArray)(collapse)([  ])((function (v) {
                return v.lines;
            })($119)));
        })(Data_Foldable.foldl(Data_Foldable.foldableArray)(dedent)({
            lines: [  ], 
            indent: Prelude.top(Prelude.boundedInt)
        })(Data_String.split("\n")($118)));
    };
})();
var partition = function (f) {
    var go = function (v) {
        return function (x) {
            var $64 = f(x);
            if ($64) {
                return {
                    pass: Data_Array.snoc(v.pass)(x), 
                    fail: v.fail
                };
            };
            if (!$64) {
                return {
                    pass: v.pass, 
                    fail: Data_Array.snoc(v.fail)(x)
                };
            };
            throw new Error("Failed pattern match at Psa.Output line 122, column 5 - line 126, column 1: " + [ $64.constructor.name ]);
        };
    };
    return Data_Foldable.foldl(Data_Foldable.foldableArray)(go)({
        pass: [  ], 
        fail: [  ]
    });
};
var onTag = function (f) {
    return function (g) {
        return function (v) {
            return function (x) {
                if (v instanceof $$Error) {
                    return f(x);
                };
                if (v instanceof Warning) {
                    return g(x);
                };
                throw new Error("Failed pattern match at Psa.Output line 168, column 1 - line 169, column 1: " + [ f.constructor.name, g.constructor.name, v.constructor.name, x.constructor.name ]);
            };
        };
    };
};
var onPath = function (f) {
    return function (g) {
        return function (v) {
            return function (x) {
                if (v instanceof Psa_Types.Src) {
                    return f(x);
                };
                if (v instanceof Psa_Types.Lib) {
                    return g(x);
                };
                return x;
            };
        };
    };
};
var updateStats = function (tag) {
    return function (path) {
        return function (code) {
            return function (printed) {
                return function (s) {
                    var bump = function (v) {
                        return new Data_Tuple.Tuple((function () {
                            if (printed) {
                                return v.value0 + 1 | 0;
                            };
                            if (!printed) {
                                return v.value0;
                            };
                            throw new Error("Failed pattern match at Psa.Output line 144, column 29 - line 144, column 57: " + [ printed.constructor.name ]);
                        })(), v.value1 + 1 | 0);
                    };
                    var alterStat = function (v) {
                        if (v instanceof Data_Maybe.Nothing) {
                            return new Data_Maybe.Just(bump(new Data_Tuple.Tuple(0, 0)));
                        };
                        if (v instanceof Data_Maybe.Just) {
                            return new Data_Maybe.Just(bump(v.value0));
                        };
                        throw new Error("Failed pattern match at Psa.Output line 133, column 1 - line 148, column 1: " + [ v.constructor.name ]);
                    };
                    var bumpCode = Data_StrMap.alter(alterStat)(code);
                    return {
                        allWarnings: onTag(Prelude.id(Prelude.categoryFn))(bumpCode)(tag)(s.allWarnings), 
                        allErrors: onTag(bumpCode)(Prelude.id(Prelude.categoryFn))(tag)(s.allErrors), 
                        srcWarnings: onTag(Prelude.id(Prelude.categoryFn))(onPath(bumpCode)(Prelude.id(Prelude.categoryFn))(path))(tag)(s.srcWarnings), 
                        srcErrors: onTag(onPath(bumpCode)(Prelude.id(Prelude.categoryFn))(path))(Prelude.id(Prelude.categoryFn))(tag)(s.srcErrors), 
                        libWarnings: onTag(Prelude.id(Prelude.categoryFn))(onPath(Prelude.id(Prelude.categoryFn))(bumpCode)(path))(tag)(s.libWarnings), 
                        libErrors: onTag(onPath(Prelude.id(Prelude.categoryFn))(bumpCode)(path))(Prelude.id(Prelude.categoryFn))(tag)(s.libErrors)
                    };
                };
            };
        };
    };
};
var isWarning = function (v) {
    if (v instanceof Warning) {
        return true;
    };
    return false;
};
var isSrc = function (v) {
    if (v instanceof Psa_Types.Src) {
        return true;
    };
    return false;
};
var isLib = function (v) {
    if (v instanceof Psa_Types.Lib) {
        return true;
    };
    return false;
};
var shouldShowError = function (v) {
    return function (v1) {
        return function (v2) {
            return function (v3) {
                if (v1 instanceof $$Error) {
                    return true;
                };
                return !v.censorWarnings && (!(v.censorSrc && isSrc(v2) || v.censorLib && isLib(v2)) && ((Data_Set.isEmpty(v.filterCodes) || Data_Set.member(Prelude.ordString)(v3)(v.filterCodes)) && (Data_Set.isEmpty(v.censorCodes) || !Data_Set.member(Prelude.ordString)(v3)(v.censorCodes))));
            };
        };
    };
};
var initialStats = {
    allWarnings: Data_StrMap.empty, 
    allErrors: Data_StrMap.empty, 
    srcWarnings: Data_StrMap.empty, 
    srcErrors: Data_StrMap.empty, 
    libWarnings: Data_StrMap.empty, 
    libErrors: Data_StrMap.empty
};
var errorPath = function (libDirs) {
    return function (path) {
        return function ($$short) {
            var startsWith = function (s$prime) {
                return function (s) {
                    var $97 = Data_String.indexOf(s)(s$prime);
                    if ($97 instanceof Data_Maybe.Just && $97.value0 === 0) {
                        return true;
                    };
                    return false;
                };
            };
            var $99 = Data_Foldable.any(Data_Foldable.foldableArray)(Prelude.booleanAlgebraBoolean)(function (v) {
                return startsWith(path)(v);
            })(libDirs);
            if ($99) {
                return new Psa_Types.Lib($$short);
            };
            if (!$99) {
                return new Psa_Types.Src($$short);
            };
            throw new Error("Failed pattern match at Psa.Output line 158, column 3 - line 161, column 3: " + [ $99.constructor.name ]);
        };
    };
};
var annotatedError = function (path) {
    return function (lines) {
        return function (error) {
            var position = Prelude["<*>"](Data_Maybe.applyMaybe)(Prelude["<$>"](Data_Maybe.functorMaybe)(trimPosition)(lines))(error.position);
            var source = Prelude["<*>"](Data_Maybe.applyMaybe)(Prelude["<$>"](Data_Maybe.functorMaybe)(function (p) {
                return Data_Array.take((p.endLine - p.startLine) + 1 | 0);
            })(position))(lines);
            var message = trimMessage(error.message);
            return {
                path: path, 
                position: position, 
                message: message, 
                source: source, 
                error: error
            };
        };
    };
};

/**
 *  | Annotates a error/warning result set with original source lines, better
 *  | positions, and semantic paths (lib vs src). The callback should load the
 *  | requested set of lines from the absolute filename based on the tentative
 *  | position information.
 */
var output = function (dictMonad) {
    return function (loadLines) {
        return function (options) {
            return function (result) {
                var pathOf = function (x) {
                    if (x.filename instanceof Data_Maybe.Just) {
                        return new Data_Tuple.Tuple(errorPath(options.libDirs)(x.filename.value0)(Node_Path.relative(options.cwd)(x.filename.value0)), x);
                    };
                    if (x.filename instanceof Data_Maybe.Nothing) {
                        return new Data_Tuple.Tuple(Psa_Types.Unknown.value, x);
                    };
                    throw new Error("Failed pattern match at Psa.Output line 88, column 5 - line 92, column 3: " + [ x.filename.constructor.name ]);
                };
                var result$prime = (function () {
                    var warnings = Prelude["<$>"](Prelude.functorArray)(pathOf)(result.warnings);
                    var errors = Prelude["<$>"](Prelude.functorArray)(pathOf)(result.errors);
                    var $102 = !options.strict;
                    if ($102) {
                        return {
                            warnings: warnings, 
                            errors: errors
                        };
                    };
                    if (!$102) {
                        var split = partition(function ($121) {
                            return isSrc(Data_Tuple.fst($121));
                        })(warnings);
                        return {
                            warnings: split.fail, 
                            errors: Prelude["<>"](Prelude.semigroupArray)(errors)(split.pass)
                        };
                    };
                    throw new Error("Failed pattern match at Psa.Output line 77, column 5 - line 82, column 5: " + [ $102.constructor.name ]);
                })();
                var onError = function (tag) {
                    return function (state) {
                        return function (v) {
                            var update = function (log) {
                                var stats = updateStats(tag)(v.value0)(v.value1.errorCode)(!Data_Array["null"](log))(state.stats);
                                return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(onTag(function (v1) {
                                    var $106 = {};
                                    for (var $107 in v1) {
                                        if (v1.hasOwnProperty($107)) {
                                            $106[$107] = v1[$107];
                                        };
                                    };
                                    $106.stats = stats;
                                    $106.errors = Prelude["<>"](Prelude.semigroupArray)(state.errors)(log);
                                    return $106;
                                })(function (v1) {
                                    var $108 = {};
                                    for (var $109 in v1) {
                                        if (v1.hasOwnProperty($109)) {
                                            $108[$109] = v1[$109];
                                        };
                                    };
                                    $108.stats = stats;
                                    $108.warnings = Prelude["<>"](Prelude.semigroupArray)(state.warnings)(log);
                                    return $108;
                                })(tag)(state));
                            };
                            var $110 = shouldShowError(options)(tag)(v.value0)(v.value1.errorCode);
                            if ($110) {
                                return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(Data_Maybe.fromMaybe(Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())(Data_Maybe.Nothing.value))(Prelude["<*>"](Data_Maybe.applyMaybe)(Prelude["<$>"](Data_Maybe.functorMaybe)(loadLines)(v.value1.filename))(v.value1.position)))(function (v1) {
                                    return update([ annotatedError(v.value0)(v1)(v.value1) ]);
                                });
                            };
                            if (!$110) {
                                return update([  ]);
                            };
                            throw new Error("Failed pattern match at Psa.Output line 94, column 5 - line 101, column 5: " + [ $110.constructor.name ]);
                        };
                    };
                };
                var initialState = {
                    warnings: [  ], 
                    errors: [  ], 
                    stats: initialStats
                };
                return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(Data_Array.foldM(dictMonad)(onError(Warning.value))(initialState)(result$prime.warnings))(function (v) {
                    return Prelude.bind(dictMonad["__superclass_Prelude.Bind_1"]())(Data_Array.foldM(dictMonad)(onError($$Error.value))(v)(result$prime.errors))(function (v1) {
                        return Prelude.pure(dictMonad["__superclass_Prelude.Applicative_0"]())((function () {
                            var $116 = {};
                            for (var $117 in v1) {
                                if (v1.hasOwnProperty($117)) {
                                    $116[$117] = v1[$117];
                                };
                            };
                            $116.warnings = Data_Array.sortBy(Psa_Types.compareByLocation)(v1.warnings);
                            $116.errors = Data_Array.sortBy(Psa_Types.compareByLocation)(v1.errors);
                            return $116;
                        })());
                    });
                });
            };
        };
    };
};
module.exports = {
    trimMessage: trimMessage, 
    trimPosition: trimPosition, 
    annotatedError: annotatedError, 
    output: output
};
