// Generated by psc version 0.8.5.0

/**
 *  | This module defines data type for the different platforms supported by
 *  | Node.js
 */
"use strict";
var Prelude = require("../Prelude");
var Data_Function = require("../Data.Function");
var Data_Maybe = require("../Data.Maybe");
var Darwin = (function () {
    function Darwin() {

    };
    Darwin.value = new Darwin();
    return Darwin;
})();
var FreeBSD = (function () {
    function FreeBSD() {

    };
    FreeBSD.value = new FreeBSD();
    return FreeBSD;
})();
var Linux = (function () {
    function Linux() {

    };
    Linux.value = new Linux();
    return Linux;
})();
var SunOS = (function () {
    function SunOS() {

    };
    SunOS.value = new SunOS();
    return SunOS;
})();
var Win32 = (function () {
    function Win32() {

    };
    Win32.value = new Win32();
    return Win32;
})();

/**
 *  | The String representation for a platform, recognised by Node.js.
 */
var toString = function (v) {
    if (v instanceof Darwin) {
        return "darwin";
    };
    if (v instanceof FreeBSD) {
        return "freebsd";
    };
    if (v instanceof Linux) {
        return "linux";
    };
    if (v instanceof SunOS) {
        return "sunos";
    };
    if (v instanceof Win32) {
        return "win32";
    };
    throw new Error("Failed pattern match at Node.Platform line 18, column 1 - line 19, column 1: " + [ v.constructor.name ]);
};
var showPlatform = new Prelude.Show(function (v) {
    if (v instanceof Darwin) {
        return "Darwin";
    };
    if (v instanceof FreeBSD) {
        return "FreeBSD";
    };
    if (v instanceof Linux) {
        return "Linux";
    };
    if (v instanceof SunOS) {
        return "SunOS";
    };
    if (v instanceof Win32) {
        return "Win32";
    };
    throw new Error("Failed pattern match at Node.Platform line 33, column 3 - line 34, column 3: " + [ v.constructor.name ]);
});
var fromString = function (v) {
    if (v === "darwin") {
        return new Data_Maybe.Just(Darwin.value);
    };
    if (v === "freebsd") {
        return new Data_Maybe.Just(FreeBSD.value);
    };
    if (v === "linux") {
        return new Data_Maybe.Just(Linux.value);
    };
    if (v === "sunos") {
        return new Data_Maybe.Just(SunOS.value);
    };
    if (v === "win32") {
        return new Data_Maybe.Just(Win32.value);
    };
    return Data_Maybe.Nothing.value;
};
var eqPlatform = new Prelude.Eq(Data_Function.on(Prelude.eq(Prelude.eqString))(toString));
var ordPlatform = new Prelude.Ord(function () {
    return eqPlatform;
}, Data_Function.on(Prelude.compare(Prelude.ordString))(toString));
module.exports = {
    Darwin: Darwin, 
    FreeBSD: FreeBSD, 
    Linux: Linux, 
    SunOS: SunOS, 
    Win32: Win32, 
    fromString: fromString, 
    toString: toString, 
    showPlatform: showPlatform, 
    eqPlatform: eqPlatform, 
    ordPlatform: ordPlatform
};
