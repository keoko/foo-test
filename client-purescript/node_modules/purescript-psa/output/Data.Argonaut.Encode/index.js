// Generated by psc version 0.8.5.0
"use strict";
var Prelude = require("../Prelude");
var Data_Argonaut_Core = require("../Data.Argonaut.Core");
var Data_Either = require("../Data.Either");
var Data_Foldable = require("../Data.Foldable");
var Data_Generic = require("../Data.Generic");
var Data_Int = require("../Data.Int");
var Data_List = require("../Data.List");
var Data_Map = require("../Data.Map");
var Data_Maybe = require("../Data.Maybe");
var Data_String = require("../Data.String");
var Data_StrMap = require("../Data.StrMap");
var Data_Tuple = require("../Data.Tuple");
var Data_Unfoldable = require("../Data.Unfoldable");
var EncodeJson = function (encodeJson) {
    this.encodeJson = encodeJson;
};
var encodeJsonUnit = new EncodeJson(Prelude["const"](Data_Argonaut_Core.jsonNull));
var encodeJsonJson = new EncodeJson(Prelude.id(Prelude.categoryFn));
var encodeJsonJString = new EncodeJson(Data_Argonaut_Core.fromString);
var encodeJsonJNumber = new EncodeJson(Data_Argonaut_Core.fromNumber);
var encodeJsonJBoolean = new EncodeJson(Data_Argonaut_Core.fromBoolean);
var encodeJsonInt = new EncodeJson(function ($32) {
    return Data_Argonaut_Core.fromNumber(Data_Int.toNumber($32));
});
var encodeJson = function (dict) {
    return dict.encodeJson;
};
var encodeJsonArray = function (dictEncodeJson) {
    return new EncodeJson(function (json) {
        return Data_Argonaut_Core.fromArray(Prelude["<$>"](Prelude.functorArray)(encodeJson(dictEncodeJson))(json));
    });
};
var encodeJsonChar = new EncodeJson(function ($33) {
    return encodeJson(encodeJsonJString)(Data_String.fromChar($33));
});
var encodeJsonEither = function (dictEncodeJson) {
    return function (dictEncodeJson1) {
        return new EncodeJson((function () {
            var obj = function (dictEncodeJson2) {
                return function (tag) {
                    return function (x) {
                        return Data_Argonaut_Core.fromObject(Data_StrMap.fromList(new Data_List.Cons(new Data_Tuple.Tuple("tag", Data_Argonaut_Core.fromString(tag)), new Data_List.Cons(new Data_Tuple.Tuple("value", encodeJson(dictEncodeJson2)(x)), Data_List.Nil.value))));
                    };
                };
            };
            return Data_Either.either(obj(dictEncodeJson)("Left"))(obj(dictEncodeJson1)("Right"));
        })());
    };
};
var encodeJsonList = function (dictEncodeJson) {
    return new EncodeJson(function (json) {
        var arr = Data_List.fromList(Data_Unfoldable.unfoldableArray)(json);
        return Data_Argonaut_Core.fromArray(Prelude["<$>"](Prelude.functorArray)(encodeJson(dictEncodeJson))(arr));
    });
};
var encodeJsonMaybe = function (dictEncodeJson) {
    return new EncodeJson(function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return Data_Argonaut_Core.jsonNull;
        };
        if (v instanceof Data_Maybe.Just) {
            return encodeJson(dictEncodeJson)(v.value0);
        };
        throw new Error("Failed pattern match at Data.Argonaut.Encode line 46, column 3 - line 47, column 3: " + [ v.constructor.name ]);
    });
};
var encodeJsonTuple = function (dictEncodeJson) {
    return function (dictEncodeJson1) {
        return new EncodeJson(function (v) {
            return encodeJson(encodeJsonArray(encodeJsonJson))([ encodeJson(dictEncodeJson)(v.value0), encodeJson(dictEncodeJson1)(v.value1) ]);
        });
    };
};
var encodeMap = function (dictOrd) {
    return function (dictEncodeJson) {
        return function (dictEncodeJson1) {
            return new EncodeJson(function ($34) {
                return encodeJson(encodeJsonList(encodeJsonTuple(dictEncodeJson)(dictEncodeJson1)))(Data_Map.toList($34));
            });
        };
    };
};
var encodeStrMap = function (dictEncodeJson) {
    return new EncodeJson(function (m) {
        return Data_Argonaut_Core.fromObject(Prelude["<$>"](Data_StrMap.functorStrMap)(encodeJson(dictEncodeJson))(m));
    });
};
var gEncodeJson$prime = function (spine) {
    var addField = function (field) {
        return Data_StrMap.insert(field.recLabel)(gEncodeJson$prime(field.recValue(Prelude.unit)));
    };
    if (spine instanceof Data_Generic.SInt) {
        return Data_Argonaut_Core.fromNumber(Data_Int.toNumber(spine.value0));
    };
    if (spine instanceof Data_Generic.SString) {
        return Data_Argonaut_Core.fromString(spine.value0);
    };
    if (spine instanceof Data_Generic.SChar) {
        return Data_Argonaut_Core.fromString(Data_String.fromChar(spine.value0));
    };
    if (spine instanceof Data_Generic.SNumber) {
        return Data_Argonaut_Core.fromNumber(spine.value0);
    };
    if (spine instanceof Data_Generic.SBoolean) {
        return Data_Argonaut_Core.fromBoolean(spine.value0);
    };
    if (spine instanceof Data_Generic.SArray) {
        return Data_Argonaut_Core.fromArray(Prelude["<$>"](Prelude.functorArray)(function ($35) {
            return gEncodeJson$prime((function (v) {
                return v(Prelude.unit);
            })($35));
        })(spine.value0));
    };
    if (spine instanceof Data_Generic.SProd) {
        return Data_Argonaut_Core.fromObject(Data_StrMap.insert("tag")(encodeJson(encodeJsonJString)(spine.value0))(Data_StrMap.singleton("values")(encodeJson(encodeJsonArray(encodeJsonJson))(Prelude["<$>"](Prelude.functorArray)(function ($36) {
            return gEncodeJson$prime((function (v) {
                return v(Prelude.unit);
            })($36));
        })(spine.value1)))));
    };
    if (spine instanceof Data_Generic.SRecord) {
        return Data_Argonaut_Core.fromObject(Data_Foldable.foldr(Data_Foldable.foldableArray)(addField)(Data_StrMap.empty)(spine.value0));
    };
    throw new Error("Failed pattern match at Data.Argonaut.Encode line 31, column 22 - line 42, column 5: " + [ spine.constructor.name ]);
};

/**
 *  | Encode any `Generic` data structure into `Json`.
 */
var gEncodeJson = function (dictGeneric) {
    return function ($37) {
        return gEncodeJson$prime(Data_Generic.toSpine(dictGeneric)($37));
    };
};
module.exports = {
    EncodeJson: EncodeJson, 
    "gEncodeJson'": gEncodeJson$prime, 
    gEncodeJson: gEncodeJson, 
    encodeJson: encodeJson, 
    encodeJsonMaybe: encodeJsonMaybe, 
    encodeJsonTuple: encodeJsonTuple, 
    encodeJsonEither: encodeJsonEither, 
    encodeJsonUnit: encodeJsonUnit, 
    encodeJsonJBoolean: encodeJsonJBoolean, 
    encodeJsonJNumber: encodeJsonJNumber, 
    encodeJsonInt: encodeJsonInt, 
    encodeJsonJString: encodeJsonJString, 
    encodeJsonJson: encodeJsonJson, 
    encodeJsonChar: encodeJsonChar, 
    encodeJsonArray: encodeJsonArray, 
    encodeJsonList: encodeJsonList, 
    encodeStrMap: encodeStrMap, 
    encodeMap: encodeMap
};
