// Generated by psc version 0.8.5.0
"use strict";
var Prelude = require("../Prelude");
var Data_Argonaut_Core = require("../Data.Argonaut.Core");
var Data_Argonaut_Decode = require("../Data.Argonaut.Decode");
var Data_Argonaut_Encode = require("../Data.Argonaut.Encode");
var Data_Either = require("../Data.Either");
var Data_Maybe = require("../Data.Maybe");
var Data_StrMap = require("../Data.StrMap");
var Data_Tuple = require("../Data.Tuple");
var $tilde$greater = function (dictEncodeJson) {
    return function (v) {
        return function (a) {
            return Data_Argonaut_Core.foldJsonObject(Data_Argonaut_Core.jsonSingletonObject(v.value0)(v.value1))(function ($13) {
                return Data_Argonaut_Core.fromObject(Data_StrMap.insert(v.value0)(v.value1)($13));
            })(Data_Argonaut_Encode.encodeJson(dictEncodeJson)(a));
        };
    };
};
var $qmark$greater$greater$eq = function (v) {
    return function (v1) {
        if (v instanceof Data_Maybe.Just) {
            return new Data_Either.Right(v.value0);
        };
        return Data_Either.Left.create("Couldn't decode " + v1);
    };
};
var $colon$eq = function (dictEncodeJson) {
    return function (k) {
        return function (v) {
            return Data_Tuple.Tuple.create(k)(Data_Argonaut_Encode.encodeJson(dictEncodeJson)(v));
        };
    };
};

/**
 *  obj .? "foo"
 */
var $dot$qmark = function (dictDecodeJson) {
    return function (o) {
        return function (s) {
            return Data_Maybe.maybe(Data_Either.Left.create("Expected field " + Prelude.show(Prelude.showString)(s)))(Data_Argonaut_Decode.decodeJson(dictDecodeJson))(Data_StrMap.lookup(s)(o));
        };
    };
};
module.exports = {
    ".?": $dot$qmark, 
    "?>>=": $qmark$greater$greater$eq, 
    "~>": $tilde$greater, 
    ":=": $colon$eq
};
