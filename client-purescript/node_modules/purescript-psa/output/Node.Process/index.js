// Generated by psc version 0.8.5.0

/**
 *  | Bindings to the global `process` object in Node.js. See also [the Node API documentation](https://nodejs.org/api/process.html)
 */
"use strict";
var $foreign = require("./foreign");
var Prelude = require("../Prelude");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Console = require("../Control.Monad.Eff.Console");
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Data_Maybe = require("../Data.Maybe");
var Data_Maybe_Unsafe = require("../Data.Maybe.Unsafe");
var Data_StrMap_1 = require("../Data.StrMap");
var Data_StrMap_1 = require("../Data.StrMap");
var Data_Posix = require("../Data.Posix");
var Data_Posix_Signal_1 = require("../Data.Posix.Signal");
var Data_Posix_Signal_1 = require("../Data.Posix.Signal");
var Node_Stream = require("../Node.Stream");
var Unsafe_Coerce = require("../Unsafe.Coerce");
var Node_Platform_1 = require("../Node.Platform");
var Node_Platform_1 = require("../Node.Platform");

/**
 *  | Get the Node.js version.
 */
var version = $foreign.process.version;

/**
 *  | Check whether the standard output stream appears to be attached to a TTY.
 *  | It is a good idea to check this before printing ANSI codes to stdout
 *  | (e.g. for coloured text in the terminal).
 */
var stdoutIsTTY = $foreign.process.stdout.isTTY;

/**
 *  | The standard output stream. Note that this stream cannot be closed; calling
 *  | `end` will result in an exception being thrown.
 */
var stdout = $foreign.process.stdout;

/**
 *  | The standard input stream. Note that this stream will never emit an `end`
 *  | event, so any handlers attached via `onEnd` will never be called.
 */
var stdin = $foreign.process.stdin;

/**
 *  | Check whether the standard error stream appears to be attached to a TTY.
 *  | It is a good idea to check this before printing ANSI codes to stderr
 *  | (e.g. for coloured text in the terminal).
 */
var stderrIsTTY = $foreign.process.stderr.isTTY;

/**
 *  | The standard error stream. Note that this stream cannot be closed; calling
 *  | `end` will result in an exception being thrown.
 */
var stderr = $foreign.process.stderr;
var platform = Data_Maybe_Unsafe.fromJust(Node_Platform_1.fromString($foreign.process.platform));
var pid = $foreign.process.pid;

/**
 *  | Install a handler for a particular signal.
 */
var onSignal = function (sig) {
    return $foreign.onSignalImpl(Data_Posix_Signal_1.toString(sig));
};
var mkEff = Unsafe_Coerce.unsafeCoerce;

/**
 *  | Register a callback to run as soon as the current event loop runs to
 *  | completion.
 */
var nextTick = function (callback) {
    return mkEff(function (v) {
        return $foreign.process.nextTick(callback);
    });
};

/**
 *  | Get a copy of the current environment.
 */
var getEnv = mkEff(function (v) {
    return $foreign.process.env;
});

/**
 *  | Lookup a particular environment variable.
 */
var lookupEnv = function (k) {
    return Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_StrMap_1.lookup(k))(getEnv);
};

/**
 *  | The absolute pathname of the `node` executable that started the
 *  | process.
 */
var execPath = mkEff(function (v) {
    return $foreign.process.execPath;
});

/**
 *  | Node-specific options passed to the `node` executable. Be aware that
 *  | this can change over the course of the program.
 */
var execArgv = mkEff(function (v) {
    return $foreign.process.execArgv;
});

/**
 *  | Get the current working directory of the process.
 */
var cwd = $foreign.process.cwd;

/**
 *  | Get an array containing the command line arguments. Be aware
 *  | that this can change over the course of the program.
 */
var argv = mkEff(function (v) {
    return $foreign.process.argv;
});
module.exports = {
    version: version, 
    stderrIsTTY: stderrIsTTY, 
    stdoutIsTTY: stdoutIsTTY, 
    stderr: stderr, 
    stdout: stdout, 
    stdin: stdin, 
    platform: platform, 
    pid: pid, 
    lookupEnv: lookupEnv, 
    getEnv: getEnv, 
    cwd: cwd, 
    execPath: execPath, 
    execArgv: execArgv, 
    argv: argv, 
    onSignal: onSignal, 
    exit: $foreign.exit, 
    setEnv: $foreign.setEnv, 
    chdir: $foreign.chdir, 
    onExit: $foreign.onExit, 
    onBeforeExit: $foreign.onBeforeExit
};
