// Generated by psc version 0.8.5.0
"use strict";
var Prelude = require("../Prelude");
var Control_Alt = require("../Control.Alt");
var Control_Bind = require("../Control.Bind");
var Data_Argonaut_Core = require("../Data.Argonaut.Core");
var Data_Array = require("../Data.Array");
var Data_Either = require("../Data.Either");
var Data_Foldable = require("../Data.Foldable");
var Data_Generic = require("../Data.Generic");
var Data_Int = require("../Data.Int");
var Data_List = require("../Data.List");
var Data_Map = require("../Data.Map");
var Data_Maybe = require("../Data.Maybe");
var Data_String = require("../Data.String");
var Data_StrMap = require("../Data.StrMap");
var Data_Traversable = require("../Data.Traversable");
var Data_Tuple = require("../Data.Tuple");
var Type_Proxy = require("../Type.Proxy");
var DecodeJson = function (decodeJson) {
    this.decodeJson = decodeJson;
};
var gDecodeJson$prime = function (signature) {
    return function (json) {
        var mFail = function (msg) {
            return Data_Maybe.maybe(new Data_Either.Left(msg))(Data_Either.Right.create);
        };
        if (signature instanceof Data_Generic.SigNumber) {
            return Prelude["<$>"](Data_Either.functorEither)(Data_Generic.SNumber.create)(mFail("Expected a number")(Data_Argonaut_Core.toNumber(json)));
        };
        if (signature instanceof Data_Generic.SigInt) {
            return Prelude["<$>"](Data_Either.functorEither)(Data_Generic.SInt.create)(mFail("Expected an integer number")(Control_Bind["=<<"](Data_Maybe.bindMaybe)(Data_Int.fromNumber)(Data_Argonaut_Core.toNumber(json))));
        };
        if (signature instanceof Data_Generic.SigString) {
            return Prelude["<$>"](Data_Either.functorEither)(Data_Generic.SString.create)(mFail("Expected a string")(Data_Argonaut_Core.toString(json)));
        };
        if (signature instanceof Data_Generic.SigChar) {
            return Prelude["<$>"](Data_Either.functorEither)(Data_Generic.SChar.create)(mFail("Expected a char")(Control_Bind["=<<"](Data_Maybe.bindMaybe)(Data_String.toChar)(Data_Argonaut_Core.toString(json))));
        };
        if (signature instanceof Data_Generic.SigBoolean) {
            return Prelude["<$>"](Data_Either.functorEither)(Data_Generic.SBoolean.create)(mFail("Expected a boolean")(Data_Argonaut_Core.toBoolean(json)));
        };
        if (signature instanceof Data_Generic.SigArray) {
            return Prelude.bind(Data_Either.bindEither)(mFail("Expected an array")(Data_Argonaut_Core.toArray(json)))(function (v) {
                return Prelude["<$>"](Data_Either.functorEither)(Data_Generic.SArray.create)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(function ($73) {
                    return Prelude.map(Data_Either.functorEither)(Prelude["const"])(gDecodeJson$prime(signature.value0(Prelude.unit))($73));
                })(v));
            });
        };
        if (signature instanceof Data_Generic.SigRecord) {
            return Prelude.bind(Data_Either.bindEither)(mFail("Expected an object")(Data_Argonaut_Core.toObject(json)))(function (v) {
                return Prelude["<$>"](Data_Either.functorEither)(Data_Generic.SRecord.create)(Data_Traversable["for"](Data_Either.applicativeEither)(Data_Traversable.traversableArray)(signature.value0)(function (v1) {
                    return Prelude.bind(Data_Either.bindEither)(mFail("'" + (v1.recLabel + "' property missing"))(Data_StrMap.lookup(v1.recLabel)(v)))(function (v2) {
                        return Prelude.bind(Data_Either.bindEither)(gDecodeJson$prime(v1.recValue(Prelude.unit))(v2))(function (v3) {
                            return Prelude.pure(Data_Either.applicativeEither)({
                                recLabel: v1.recLabel, 
                                recValue: Prelude["const"](v3)
                            });
                        });
                    });
                }));
            });
        };
        if (signature instanceof Data_Generic.SigProd) {
            var decodingErr = function (msg) {
                return "When decoding a " + (signature.value0 + (": " + msg));
            };
            return Prelude.bind(Data_Either.bindEither)(mFail(decodingErr("expected an object"))(Data_Argonaut_Core.toObject(json)))(function (v) {
                return Prelude.bind(Data_Either.bindEither)(mFail(decodingErr("'tag' property is missing"))(Data_StrMap.lookup("tag")(v)))(function (v1) {
                    return Prelude.bind(Data_Either.bindEither)(mFail(decodingErr("'tag' property is not a string"))(Data_Argonaut_Core.toString(v1)))(function (v2) {
                        var $46 = Data_Foldable.find(Data_Foldable.foldableArray)(function ($74) {
                            return (function (v3) {
                                return v2 === v3;
                            })((function (v3) {
                                return v3.sigConstructor;
                            })($74));
                        })(signature.value1);
                        if ($46 instanceof Data_Maybe.Nothing) {
                            return new Data_Either.Left(decodingErr("'" + (v2 + "' isn't a valid constructor")));
                        };
                        if ($46 instanceof Data_Maybe.Just) {
                            return Prelude.bind(Data_Either.bindEither)(mFail(decodingErr("'values' array is missing"))(Control_Bind["=<<"](Data_Maybe.bindMaybe)(Data_Argonaut_Core.toArray)(Data_StrMap.lookup("values")(v))))(function (v3) {
                                return Prelude.bind(Data_Either.bindEither)(Data_Array.zipWithA(Data_Either.applicativeEither)(function (k) {
                                    return gDecodeJson$prime(k(Prelude.unit));
                                })($46.value0.sigValues)(v3))(function (v4) {
                                    return Prelude.pure(Data_Either.applicativeEither)(new Data_Generic.SProd(v2, Prelude["<$>"](Prelude.functorArray)(Prelude["const"])(v4)));
                                });
                            });
                        };
                        throw new Error("Failed pattern match at Data.Argonaut.Decode line 58, column 5 - line 64, column 3: " + [ $46.constructor.name ]);
                    });
                });
            });
        };
        throw new Error("Failed pattern match at Data.Argonaut.Decode line 38, column 31 - line 64, column 3: " + [ signature.constructor.name ]);
    };
};

/**
 *  | Decode `Json` representation of a value which has a `Generic` type.
 */
var gDecodeJson = function (dictGeneric) {
    return function (json) {
        return Control_Bind["=<<"](Data_Either.bindEither)(function ($75) {
            return Data_Maybe.maybe(new Data_Either.Left("fromSpine failed"))(Data_Either.Right.create)(Data_Generic.fromSpine(dictGeneric)($75));
        })(gDecodeJson$prime(Data_Generic.toSignature(dictGeneric)((Type_Proxy["Proxy"]).value))(json));
    };
};
var decodeJsonString = new DecodeJson(Data_Argonaut_Core.foldJsonString(new Data_Either.Left("Not a String"))(Data_Either.Right.create));
var decodeJsonNumber = new DecodeJson(Data_Argonaut_Core.foldJsonNumber(new Data_Either.Left("Not a Number"))(Data_Either.Right.create));
var decodeJsonNull = new DecodeJson(Data_Argonaut_Core.foldJsonNull(new Data_Either.Left("Not null"))(Prelude["const"](new Data_Either.Right(Prelude.unit))));
var decodeJsonJson = new DecodeJson(Data_Either.Right.create);
var decodeJsonInt = new DecodeJson(function (num) {
    var go = function (num1) {
        return Data_Maybe.maybe(new Data_Either.Left("Not an Int"))(Data_Either.Right.create)(Data_Int.fromNumber(num1));
    };
    return Data_Argonaut_Core.foldJsonNumber(new Data_Either.Left("Not a Number"))(go)(num);
});
var decodeJsonBoolean = new DecodeJson(Data_Argonaut_Core.foldJsonBoolean(new Data_Either.Left("Not a Boolean"))(Data_Either.Right.create));
var decodeJson = function (dict) {
    return dict.decodeJson;
};
var decodeJsonChar = new DecodeJson(function (j) {
    var go = function (v) {
        if (v instanceof Data_Maybe.Nothing) {
            return Data_Either.Left.create("Expected character but found: " + Prelude.show(Data_Argonaut_Core.showJson)(j));
        };
        if (v instanceof Data_Maybe.Just) {
            return new Data_Either.Right(v.value0);
        };
        throw new Error("Failed pattern match at Data.Argonaut.Decode line 119, column 5 - line 120, column 5: " + [ v.constructor.name ]);
    };
    return Prelude[">>="](Data_Either.bindEither)(Prelude["<$>"](Data_Either.functorEither)(Data_String.charAt(0))(decodeJson(decodeJsonString)(j)))(go);
});
var decodeJsonEither = function (dictDecodeJson) {
    return function (dictDecodeJson1) {
        return new DecodeJson(function (j) {
            var just = function (v) {
                if (v instanceof Data_Maybe.Just) {
                    return new Data_Either.Right(v.value0);
                };
                if (v instanceof Data_Maybe.Nothing) {
                    return new Data_Either.Left("Couldn't decode Either");
                };
                throw new Error("Failed pattern match at Data.Argonaut.Decode line 95, column 5 - line 96, column 5: " + [ v.constructor.name ]);
            };
            var $57 = Data_Argonaut_Core.toObject(j);
            if ($57 instanceof Data_Maybe.Just) {
                return Prelude.bind(Data_Either.bindEither)(just(Data_StrMap.lookup("tag")($57.value0)))(function (v) {
                    return Prelude.bind(Data_Either.bindEither)(just(Data_StrMap.lookup("value")($57.value0)))(function (v1) {
                        var $60 = Data_Argonaut_Core.toString(v);
                        if ($60 instanceof Data_Maybe.Just && $60.value0 === "Right") {
                            return Prelude["<$>"](Data_Either.functorEither)(Data_Either.Right.create)(decodeJson(dictDecodeJson1)(v1));
                        };
                        if ($60 instanceof Data_Maybe.Just && $60.value0 === "Left") {
                            return Prelude["<$>"](Data_Either.functorEither)(Data_Either.Left.create)(decodeJson(dictDecodeJson)(v1));
                        };
                        return new Data_Either.Left("Couldn't decode Either");
                    });
                });
            };
            return new Data_Either.Left("Couldn't decode Either");
        });
    };
};
var decodeJsonMaybe = function (dictDecodeJson) {
    return new DecodeJson(function (j) {
        if (Data_Argonaut_Core.isNull(j)) {
            return Prelude.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
        };
        if (Prelude.otherwise) {
            return Control_Alt["<|>"](Data_Either.altEither)(Prelude["<$>"](Data_Either.functorEither)(Data_Maybe.Just.create)(decodeJson(dictDecodeJson)(j)))(Prelude.pure(Data_Either.applicativeEither)(Data_Maybe.Nothing.value));
        };
        throw new Error("Failed pattern match at Data.Argonaut.Decode line 69, column 3 - line 73, column 1: " + [ j.constructor.name ]);
    });
};
var decodeMaybe = function (dictDecodeJson) {
    return function (json) {
        return Data_Either.either(Prelude["const"](Data_Maybe.Nothing.value))(Prelude.pure(Data_Maybe.applicativeMaybe))(decodeJson(dictDecodeJson)(json));
    };
};
var decodeList = function (dictDecodeJson) {
    return new DecodeJson(function (json) {
        return Data_Maybe.maybe(new Data_Either.Left("Couldn't decode List"))(Data_Either.Right.create)(Prelude.bind(Data_Maybe.bindMaybe)(Prelude["<$>"](Data_Maybe.functorMaybe)(Data_List.toList(Data_Foldable.foldableArray))(Data_Argonaut_Core.toArray(json)))(function (v) {
            return Data_Traversable.traverse(Data_List.traversableList)(Data_Maybe.applicativeMaybe)(decodeMaybe(dictDecodeJson))(v);
        }));
    });
};
var decodeJsonTuple = function (dictDecodeJson) {
    return function (dictDecodeJson1) {
        return new DecodeJson(function (j) {
            var f = function (v) {
                if (v instanceof Data_List.Cons && (v.value1 instanceof Data_List.Cons && v.value1.value1 instanceof Data_List.Nil)) {
                    return Prelude["<*>"](Data_Either.applyEither)(Prelude["<$>"](Data_Either.functorEither)(Data_Tuple.Tuple.create)(decodeJson(dictDecodeJson)(v.value0)))(decodeJson(dictDecodeJson1)(v.value1.value0));
                };
                return new Data_Either.Left("Couldn't decode Tuple");
            };
            return Prelude[">>="](Data_Either.bindEither)(decodeJson(decodeList(decodeJsonJson))(j))(f);
        });
    };
};
var decodeMap = function (dictOrd) {
    return function (dictDecodeJson) {
        return function (dictDecodeJson1) {
            return new DecodeJson(function (j) {
                return Prelude["<$>"](Data_Either.functorEither)(Data_Map.fromList(dictOrd))(decodeJson(decodeList(decodeJsonTuple(dictDecodeJson)(dictDecodeJson1)))(j));
            });
        };
    };
};
var decodeStrMap = function (dictDecodeJson) {
    return new DecodeJson(function (json) {
        return Data_Maybe.maybe(new Data_Either.Left("Couldn't decode StrMap"))(Data_Either.Right.create)(Prelude.bind(Data_Maybe.bindMaybe)(Data_Argonaut_Core.toObject(json))(function (v) {
            return Data_Traversable.traverse(Data_StrMap.traversableStrMap)(Data_Maybe.applicativeMaybe)(decodeMaybe(dictDecodeJson))(v);
        }));
    });
};
var decodeArray = function (dictDecodeJson) {
    return new DecodeJson(function (json) {
        return Data_Maybe.maybe(new Data_Either.Left("Couldn't decode Array"))(Data_Either.Right.create)(Prelude.bind(Data_Maybe.bindMaybe)(Data_Argonaut_Core.toArray(json))(function (v) {
            return Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(decodeMaybe(dictDecodeJson))(v);
        }));
    });
};
module.exports = {
    DecodeJson: DecodeJson, 
    decodeMaybe: decodeMaybe, 
    "gDecodeJson'": gDecodeJson$prime, 
    gDecodeJson: gDecodeJson, 
    decodeJson: decodeJson, 
    decodeJsonMaybe: decodeJsonMaybe, 
    decodeJsonTuple: decodeJsonTuple, 
    decodeJsonEither: decodeJsonEither, 
    decodeJsonNull: decodeJsonNull, 
    decodeJsonBoolean: decodeJsonBoolean, 
    decodeJsonNumber: decodeJsonNumber, 
    decodeJsonInt: decodeJsonInt, 
    decodeJsonString: decodeJsonString, 
    decodeJsonJson: decodeJsonJson, 
    decodeJsonChar: decodeJsonChar, 
    decodeStrMap: decodeStrMap, 
    decodeArray: decodeArray, 
    decodeList: decodeList, 
    decodeMap: decodeMap
};
