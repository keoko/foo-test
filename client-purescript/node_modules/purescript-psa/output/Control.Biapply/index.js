// Generated by psc version 0.8.5.0
"use strict";
var Prelude = require("../Prelude");
var Data_Bifunctor = require("../Data.Bifunctor");

/**
 *  | `Biapply` captures type constructors of two arguments which support lifting of
 *  | functions of one or more arguments, in the sense of `Apply`.
 */
var Biapply = function (__superclass_Data$dotBifunctor$dotBifunctor_0, biapply) {
    this["__superclass_Data.Bifunctor.Bifunctor_0"] = __superclass_Data$dotBifunctor$dotBifunctor_0;
    this.biapply = biapply;
};

/**
 *  | A convenience function which can be used to apply the result of `bipure` in
 *  | the style of `Applicative`:
 *  |
 *  | ```purescript
 *  | bipure f g <<$>> x <<*>> y
 *  | ```
 */
var $less$less$dollar$greater$greater = Prelude.id(Prelude.categoryFn);

/**
 *  | `Biapply` captures type constructors of two arguments which support lifting of
 *  | functions of one or more arguments, in the sense of `Apply`.
 */
var biapply = function (dict) {
    return dict.biapply;
};

/**
 *  | An infix version of `biapply`.
 */
var $less$less$times$greater$greater = function (dictBiapply) {
    return biapply(dictBiapply);
};

/**
 *  | Lift a function of two arguments.
 */
var bilift2 = function (dictBiapply) {
    return function (f) {
        return function (g) {
            return function (a) {
                return function (b) {
                    return $less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g))(a))(b);
                };
            };
        };
    };
};

/**
 *  | Lift a function of three arguments.
 */
var bilift3 = function (dictBiapply) {
    return function (f) {
        return function (g) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return $less$less$times$greater$greater(dictBiapply)($less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(f)(g))(a))(b))(c);
                    };
                };
            };
        };
    };
};

/**
 *  | Keep the results of the second computation
 */
var $times$greater$greater = function (dictBiapply) {
    return function (a) {
        return function (b) {
            return $less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryFn)))(Prelude["const"](Prelude.id(Prelude.categoryFn))))(a))(b);
        };
    };
};

/**
 *  | Keep the results of the first computation
 */
var $less$less$times = function (dictBiapply) {
    return function (a) {
        return function (b) {
            return $less$less$times$greater$greater(dictBiapply)($less$less$dollar$greater$greater(Data_Bifunctor.bimap(dictBiapply["__superclass_Data.Bifunctor.Bifunctor_0"]())(Prelude["const"])(Prelude["const"]))(a))(b);
        };
    };
};
module.exports = {
    Biapply: Biapply, 
    bilift3: bilift3, 
    bilift2: bilift2, 
    "<<*": $less$less$times, 
    "*>>": $times$greater$greater, 
    "<<*>>": $less$less$times$greater$greater, 
    biapply: biapply, 
    "<<$>>": $less$less$dollar$greater$greater
};
