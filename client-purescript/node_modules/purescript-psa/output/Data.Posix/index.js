// Generated by psc version 0.8.5.0
"use strict";
var Prelude = require("../Prelude");
var Data_Function = require("../Data.Function");

/**
 *  | A user ID (for a process or a file).
 */
var Uid = function (x) {
    return x;
};

/**
 *  | A process ID.
 */
var Pid = function (x) {
    return x;
};

/**
 *  | A group ID (for a process or a file).
 */
var Gid = function (x) {
    return x;
};
var showUid = new Prelude.Show(function (v) {
    return "(Uid " + (Prelude.show(Prelude.showInt)(v) + ")");
});
var showPid = new Prelude.Show(function (v) {
    return "(Pid " + (Prelude.show(Prelude.showInt)(v) + ")");
});
var showGid = new Prelude.Show(function (v) {
    return "(Gid " + (Prelude.show(Prelude.showInt)(v) + ")");
});
var runUid = function (v) {
    return v;
};
var runPid = function (v) {
    return v;
};
var runGid = function (v) {
    return v;
};
var eqUid = new Prelude.Eq(Data_Function.on(Prelude.eq(Prelude.eqInt))(runUid));
var ordUid = new Prelude.Ord(function () {
    return eqUid;
}, Data_Function.on(Prelude.compare(Prelude.ordInt))(runUid));
var eqPid = new Prelude.Eq(Data_Function.on(Prelude.eq(Prelude.eqInt))(runPid));
var ordPid = new Prelude.Ord(function () {
    return eqPid;
}, Data_Function.on(Prelude.compare(Prelude.ordInt))(runPid));
var eqGid = new Prelude.Eq(Data_Function.on(Prelude.eq(Prelude.eqInt))(runGid));
var ordGid = new Prelude.Ord(function () {
    return eqGid;
}, Data_Function.on(Prelude.compare(Prelude.ordInt))(runGid));
module.exports = {
    Uid: Uid, 
    Gid: Gid, 
    Pid: Pid, 
    runUid: runUid, 
    runGid: runGid, 
    runPid: runPid, 
    showPid: showPid, 
    eqPid: eqPid, 
    ordPid: ordPid, 
    showGid: showGid, 
    eqGid: eqGid, 
    ordGid: ordGid, 
    showUid: showUid, 
    eqUid: eqUid, 
    ordUid: ordUid
};
