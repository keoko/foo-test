// Generated by psc version 0.8.5.0
"use strict";
var Prelude = require("../Prelude");

/**
 *  | A type of functor that can be used to adapt the type of a wrapped function
 *  | where the parameterised type occurs in both the positive and negative
 *  | position, for example, `F (a -> a)`.
 *  |
 *  | An `Invariant` instance should satisfy the following laws:
 *  |
 *  | - Identity: `imap id id = id`
 *  | - Composition: `imap g1 g2 <<< imap f1 f2 = imap (g1 <<< f1) (f2 <<< g2)`
 *  |
 */
var Invariant = function (imap) {
    this.imap = imap;
};

/**
 *  | As all `Functor`s are also trivially `Invariant`, this function can be
 *  | used as the `imap` implementation for all `Invariant` instances for
 *  | `Functors`.
 */
var imapF = function (dictFunctor) {
    return function ($1) {
        return Prelude["const"](Prelude.map(dictFunctor)($1));
    };
};
var invariantArray = new Invariant(imapF(Prelude.functorArray));
var invariantFn = new Invariant(imapF(Prelude.functorFn));

/**
 *  | A type of functor that can be used to adapt the type of a wrapped function
 *  | where the parameterised type occurs in both the positive and negative
 *  | position, for example, `F (a -> a)`.
 *  |
 *  | An `Invariant` instance should satisfy the following laws:
 *  |
 *  | - Identity: `imap id id = id`
 *  | - Composition: `imap g1 g2 <<< imap f1 f2 = imap (g1 <<< f1) (f2 <<< g2)`
 *  |
 */
var imap = function (dict) {
    return dict.imap;
};
module.exports = {
    Invariant: Invariant, 
    imapF: imapF, 
    imap: imap, 
    invariantFn: invariantFn, 
    invariantArray: invariantArray
};
