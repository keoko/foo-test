// Generated by psc version 0.8.5.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("../Prelude");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Unsafe = require("../Control.Monad.Eff.Unsafe");
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Data_Date = require("../Data.Date");
var Data_Time = require("../Data.Time");
var Data_Either = require("../Data.Either");
var Data_Function = require("../Data.Function");
var Data_Maybe = require("../Data.Maybe");
var Data_Nullable = require("../Data.Nullable");
var Node_Buffer = require("../Node.Buffer");
var Data_Int = require("../Data.Int");
var Node_Encoding = require("../Node.Encoding");
var Node_FS = require("../Node.FS");
var Node_FS_Stats = require("../Node.FS.Stats");
var Node_Path = require("../Node.Path");
var Node_FS_Perms = require("../Node.FS.Perms");
var Node_FS_Internal = require("../Node.FS.Internal");
var handleCallback = function (cb) {
    return $foreign.handleCallbackImpl(Data_Either.Left.create, Data_Either.Right.create, cb);
};
var fs = Node_FS_Internal.unsafeRequireFS;

/**
 *  | Creates a link to an existing file.
 */
var link = function (src) {
    return function (dst) {
        return function (cb) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.link(src, dst, handleCallback(cb));
            });
        };
    };
};

/**
 *  | Makes a new directory with the specified permissions.
 */
var mkdir$prime = function (file) {
    return function (perms) {
        return function (cb) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.mkdir(file, Node_FS_Perms.permsToString(perms), handleCallback(cb));
            });
        };
    };
};

/**
 *  | Makes a new directory.
 */
var mkdir = Prelude.flip(mkdir$prime)(Node_FS_Perms.mkPerms(Node_FS_Perms.all)(Node_FS_Perms.all)(Node_FS_Perms.all));

/**
 *  | Reads the entire contents of a file returning the result as a raw buffer.
 */
var readFile = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.readFile(file, {}, handleCallback(cb));
        });
    };
};

/**
 *  | Reads the entire contents of a text file with the specified encoding.
 */
var readTextFile = function (encoding) {
    return function (file) {
        return function (cb) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.readFile(file, {
                    encoding: Prelude.show(Node_Encoding.showEncoding)(encoding)
                }, handleCallback(cb));
            });
        };
    };
};

/**
 *  | Reads the contents of a directory.
 */
var readdir = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.readdir(file, handleCallback(cb));
        });
    };
};

/**
 *  | Reads the value of a symlink.
 */
var readlink = function (path) {
    return function (cb) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.readlink(path, handleCallback(cb));
        });
    };
};

/**
 *  | Find the canonicalized absolute location for a path.
 */
var realpath = function (path) {
    return function (cb) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.realpath(path, {}, handleCallback(cb));
        });
    };
};

/**
 *  | Find the canonicalized absolute location for a path using a cache object
 *  | for already resolved paths.
 */
var realpath$prime = function (path) {
    return function (cache) {
        return function (cb) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.realpath(path, cache, handleCallback(cb));
            });
        };
    };
};

/**
 *  | Renames a file.
 */
var rename = function (oldFile) {
    return function (newFile) {
        return function (cb) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.rename(oldFile, newFile, handleCallback(cb));
            });
        };
    };
};

/**
 *  | Deletes a directory.
 */
var rmdir = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.rmdir(file, handleCallback(cb));
        });
    };
};

/**
 *  | Gets file statistics.
 */
var stat = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.stat(file, handleCallback(function ($58) {
                return cb(Prelude["<$>"](Data_Either.functorEither)(Node_FS_Stats.Stats.create)($58));
            }));
        });
    };
};

/**
 *  | Creates a symlink.
 */
var symlink = function (src) {
    return function (dest) {
        return function (ty) {
            return function (cb) {
                return Node_FS_Internal.mkEff(function (v) {
                    return fs.symlink(src, dest, Node_FS.symlinkTypeToNode(ty), handleCallback(cb));
                });
            };
        };
    };
};

/**
 *  | Truncates a file to the specified length.
 */
var truncate = function (file) {
    return function (len) {
        return function (cb) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.truncate(file, len, handleCallback(cb));
            });
        };
    };
};

/**
 *  | Deletes a file.
 */
var unlink = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.unlink(file, handleCallback(cb));
        });
    };
};

/**
 *  | Sets the accessed and modified times for the specified file.
 */
var utimes = function (file) {
    return function (atime) {
        return function (mtime) {
            return function (cb) {
                var ms = function (v) {
                    return Data_Int.round(v);
                };
                var fromDate = function (date) {
                    return ms(Data_Date.toEpochMilliseconds(date)) / 1000 | 0;
                };
                return Node_FS_Internal.mkEff(function (v) {
                    return fs.utimes(file, fromDate(atime), fromDate(mtime), handleCallback(cb));
                });
            };
        };
    };
};

/**
 *  | Writes a buffer to a file.
 */
var writeFile = function (file) {
    return function (buff) {
        return function (cb) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.writeFile(file, buff, {}, handleCallback(cb));
            });
        };
    };
};

/**
 *  | Writes text to a file using the specified encoding.
 */
var writeTextFile = function (encoding) {
    return function (file) {
        return function (buff) {
            return function (cb) {
                return Node_FS_Internal.mkEff(function (v) {
                    return fs.writeFile(file, buff, {
                        encoding: Prelude.show(Node_Encoding.showEncoding)(encoding)
                    }, handleCallback(cb));
                });
            };
        };
    };
};

/**
 *  | Write to a file asynchronously. See the [Node Documentation](https://nodejs.org/api/fs.html#fs_fs_write_fd_buffer_offset_length_position_callback)
 *  | for details.
 */
var fdWrite = function (fd) {
    return function (buff) {
        return function (off) {
            return function (len) {
                return function (pos) {
                    return function (cb) {
                        return Node_FS_Internal.mkEff(function (v) {
                            return fs.write(fd, buff, off, len, Data_Nullable.toNullable(pos), handleCallback(cb));
                        });
                    };
                };
            };
        };
    };
};

/**
 *  | Read from a file asynchronously. See the [Node Documentation](https://nodejs.org/api/fs.html#fs_fs_read_fd_buffer_offset_length_position_callback)
 *  | for details.
 */
var fdRead = function (fd) {
    return function (buff) {
        return function (off) {
            return function (len) {
                return function (pos) {
                    return function (cb) {
                        return Node_FS_Internal.mkEff(function (v) {
                            return fs.read(fd, buff, off, len, Data_Nullable.toNullable(pos), handleCallback(cb));
                        });
                    };
                };
            };
        };
    };
};

/**
 *  | Open a file asynchronously. See the [Node Documentation](https://nodejs.org/api/fs.html#fs_fs_open_path_flags_mode_callback)
 *  | for details.
 */
var fdOpen = function (file) {
    return function (flags) {
        return function (mode) {
            return function (cb) {
                return Node_FS_Internal.mkEff(function (v) {
                    return fs.open(file, Node_FS.fileFlagsToNode(flags), Data_Nullable.toNullable(mode), handleCallback(cb));
                });
            };
        };
    };
};

/**
 *  | Convenience function to fill the whole buffer from the current
 *  | file position.
 */
var fdNext = function (fd) {
    return function (buff) {
        return function (cb) {
            return function __do() {
                var v = Node_Buffer.size(buff)();
                return fdRead(fd)(buff)(0)(v)(Data_Maybe.Nothing.value)(cb)();
            };
        };
    };
};

/**
 *  | Close a file asynchronously. See the [Node Documentation](https://nodejs.org/api/fs.html#fs_fs_close_fd_callback)
 *  | for details.
 */
var fdClose = function (fd) {
    return function (cb) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.close(fd, handleCallback(cb));
        });
    };
};

/**
 *  | Convenience function to append the whole buffer to the current
 *  | file position.
 */
var fdAppend = function (fd) {
    return function (buff) {
        return function (cb) {
            return function __do() {
                var v = Node_Buffer.size(buff)();
                return fdWrite(fd)(buff)(0)(v)(Data_Maybe.Nothing.value)(cb)();
            };
        };
    };
};

/**
 *  | Check if the path exists.
 */
var exists = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEff(function (v) {
            return fs.exists(file, function (b) {
                return Control_Monad_Eff.runPure(Control_Monad_Eff_Unsafe.unsafeInterleaveEff(cb(b)));
            });
        });
    };
};

/**
 *  | Changes the ownership of a file.
 */
var chown = function (file) {
    return function (uid) {
        return function (gid) {
            return function (cb) {
                return Node_FS_Internal.mkEff(function (v) {
                    return fs.chown(file, uid, gid, handleCallback(cb));
                });
            };
        };
    };
};

/**
 *  | Changes the permissions of a file.
 */
var chmod = function (file) {
    return function (perms) {
        return function (cb) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.chmod(file, Node_FS_Perms.permsToString(perms), handleCallback(cb));
            });
        };
    };
};

/**
 *  | Appends text to a file using the specified encoding.
 */
var appendTextFile = function (encoding) {
    return function (file) {
        return function (buff) {
            return function (cb) {
                return Node_FS_Internal.mkEff(function (v) {
                    return fs.appendFile(file, buff, {
                        encoding: Prelude.show(Node_Encoding.showEncoding)(encoding)
                    }, handleCallback(cb));
                });
            };
        };
    };
};

/**
 *  | Appends the contents of a buffer to a file.
 */
var appendFile = function (file) {
    return function (buff) {
        return function (cb) {
            return Node_FS_Internal.mkEff(function (v) {
                return fs.appendFile(file, buff, {}, handleCallback(cb));
            });
        };
    };
};
module.exports = {
    fdClose: fdClose, 
    fdAppend: fdAppend, 
    fdWrite: fdWrite, 
    fdNext: fdNext, 
    fdRead: fdRead, 
    fdOpen: fdOpen, 
    exists: exists, 
    appendTextFile: appendTextFile, 
    appendFile: appendFile, 
    writeTextFile: writeTextFile, 
    writeFile: writeFile, 
    readTextFile: readTextFile, 
    readFile: readFile, 
    utimes: utimes, 
    readdir: readdir, 
    "mkdir'": mkdir$prime, 
    mkdir: mkdir, 
    rmdir: rmdir, 
    unlink: unlink, 
    "realpath'": realpath$prime, 
    realpath: realpath, 
    readlink: readlink, 
    symlink: symlink, 
    link: link, 
    stat: stat, 
    chmod: chmod, 
    chown: chown, 
    truncate: truncate, 
    rename: rename
};
