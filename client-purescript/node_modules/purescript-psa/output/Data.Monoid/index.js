// Generated by psc version 0.8.5.0
"use strict";
var Prelude = require("../Prelude");

/**
 *  | A `Monoid` is a `Semigroup` with a value `mempty`, which is both a
 *  | left and right unit for the associative operation `<>`:
 *  |
 *  | ```text
 *  | forall x. mempty <> x = x <> mempty = x
 *  | ```
 *  |
 *  | `Monoid`s are commonly used as the result of fold operations, where
 *  | `<>` is used to combine individual results, and `mempty` gives the result
 *  | of folding an empty collection of elements.
 */
var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
    this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
    this.mempty = mempty;
};
var monoidUnit = new Monoid(function () {
    return Prelude.semigroupUnit;
}, Prelude.unit);
var monoidString = new Monoid(function () {
    return Prelude.semigroupString;
}, "");
var monoidArray = new Monoid(function () {
    return Prelude.semigroupArray;
}, [  ]);

/**
 *  | A `Monoid` is a `Semigroup` with a value `mempty`, which is both a
 *  | left and right unit for the associative operation `<>`:
 *  |
 *  | ```text
 *  | forall x. mempty <> x = x <> mempty = x
 *  | ```
 *  |
 *  | `Monoid`s are commonly used as the result of fold operations, where
 *  | `<>` is used to combine individual results, and `mempty` gives the result
 *  | of folding an empty collection of elements.
 */
var mempty = function (dict) {
    return dict.mempty;
};
var monoidFn = function (dictMonoid) {
    return new Monoid(function () {
        return Prelude.semigroupFn(dictMonoid["__superclass_Prelude.Semigroup_0"]());
    }, Prelude["const"](mempty(dictMonoid)));
};
module.exports = {
    Monoid: Monoid, 
    mempty: mempty, 
    monoidUnit: monoidUnit, 
    monoidFn: monoidFn, 
    monoidString: monoidString, 
    monoidArray: monoidArray
};
