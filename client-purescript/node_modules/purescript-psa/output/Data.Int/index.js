// Generated by psc version 0.8.5.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("../Prelude");
var Data_Int_Bits = require("../Data.Int.Bits");
var Data_Maybe = require("../Data.Maybe");
var Data_Maybe_Unsafe = require("../Data.Maybe.Unsafe");
var $$Math = require("../Math");

/**
 *  | The negation of `even`.
 *  |
 *  | ``` purescript
 *  | odd 0 == false
 *  | odd 1 == false
 *  | ```
 */
var odd = function (x) {
    return (x & 1) !== 0;
};

/**
 *  | Reads an `Int` from a `String` value. The number must parse as an integer
 *  | and fall within the valid range of values for the `Int` type, otherwise
 *  | `Nothing` is returned.
 */
var fromString = $foreign.fromStringImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

/**
 *  | Creates an `Int` from a `Number` value. The number must already be an
 *  | integer and fall within the valid range of values for the `Int` type
 *  | otherwise `Nothing` is returned.
 */
var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

/**
 *  | Convert an integral `Number` to an `Int`, by clamping to the `Int` range.
 *  | This function will throw an error at runtime if the argument is
 *  | non-integral.
 */
var unsafeClamp = function (x) {
    if (x >= $foreign.toNumber(Prelude.top(Prelude.boundedInt))) {
        return Prelude.top(Prelude.boundedInt);
    };
    if (x <= $foreign.toNumber(Prelude.bottom(Prelude.boundedInt))) {
        return Prelude.bottom(Prelude.boundedInt);
    };
    if (Prelude.otherwise) {
        return Data_Maybe_Unsafe.fromJust(fromNumber(x));
    };
    throw new Error("Failed pattern match at Data.Int line 49, column 1 - line 56, column 1: " + [ x.constructor.name ]);
};

/**
 *  | Convert a `Number` to an `Int`, by taking the nearest integer to the
 *  | argument. Values outside the `Int` range are clamped.
 */
var round = function ($1) {
    return unsafeClamp($$Math.round($1));
};

/**
 *  | Convert a `Number` to an `Int`, by taking the closest integer equal to or
 *  | less than the argument. Values outside the `Int` range are clamped.
 */
var floor = function ($2) {
    return unsafeClamp($$Math.floor($2));
};

/**
 *  | Returns whether an `Int` is an even number.
 *  |
 *  | ``` purescript
 *  | even 0 == true
 *  | even 1 == false
 *  | ```
 */
var even = function (x) {
    return (x & 1) === 0;
};

/**
 *  | Convert a `Number` to an `Int`, by taking the closest integer equal to or
 *  | greater than the argument. Values outside the `Int` range are clamped.
 */
var ceil = function ($3) {
    return unsafeClamp($$Math.ceil($3));
};
module.exports = {
    odd: odd, 
    even: even, 
    fromString: fromString, 
    round: round, 
    floor: floor, 
    ceil: ceil, 
    fromNumber: fromNumber, 
    toNumber: $foreign.toNumber
};
