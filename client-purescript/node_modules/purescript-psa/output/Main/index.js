// Generated by psc version 0.8.5.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("../Prelude");
var Data_Argonaut_Printer = require("../Data.Argonaut.Printer");
var Data_Argonaut_Parser = require("../Data.Argonaut.Parser");
var Data_Argonaut_Decode = require("../Data.Argonaut.Decode");
var Data_Argonaut_Encode = require("../Data.Argonaut.Encode");
var Data_Array = require("../Data.Array");
var Data_Array_Unsafe = require("../Data.Array.Unsafe");
var Data_Date = require("../Data.Date");
var Data_Either = require("../Data.Either");
var Data_Foldable = require("../Data.Foldable");
var Data_Traversable = require("../Data.Traversable");
var Data_StrMap = require("../Data.StrMap");
var Data_StrMap_ST = require("../Data.StrMap.ST");
var Data_Maybe = require("../Data.Maybe");
var Data_Set = require("../Data.Set");
var Data_String = require("../Data.String");
var Control_Monad_Eff = require("../Control.Monad.Eff");
var Control_Monad_Eff_Console_1 = require("../Control.Monad.Eff.Console");
var Control_Monad_Eff_Console_1 = require("../Control.Monad.Eff.Console");
var Control_Monad_Eff_Exception = require("../Control.Monad.Eff.Exception");
var Control_Monad_ST_1 = require("../Control.Monad.ST");
var Control_Monad_ST_1 = require("../Control.Monad.ST");
var Control_Apply = require("../Control.Apply");
var Control_Monad = require("../Control.Monad");
var Node_Platform = require("../Node.Platform");
var Node_Process_1 = require("../Node.Process");
var Node_Process_1 = require("../Node.Process");
var Node_ChildProcess_1 = require("../Node.ChildProcess");
var Node_ChildProcess_1 = require("../Node.ChildProcess");
var Node_Stream = require("../Node.Stream");
var Node_Buffer = require("../Node.Buffer");
var Node_Encoding = require("../Node.Encoding");
var Node_FS = require("../Node.FS");
var Node_FS_Sync = require("../Node.FS.Sync");
var Node_FS_Stats = require("../Node.FS.Stats");
var Node_Path = require("../Node.Path");
var Unsafe_Coerce = require("../Unsafe.Coerce");
var Psa = require("../Psa");
var Psa_Printer_Default = require("../Psa.Printer.Default");
var Psa_Printer_Json = require("../Psa.Printer.Json");
var Data_Posix_Signal = require("../Data.Posix.Signal");
var Psa_Types = require("../Psa.Types");
var Psa_Output = require("../Psa.Output");
var usage = "psa - Error/Warning reporting frontend for psc\n\nUsage: psa [--censor-lib] [--censor-src]\n           [--censor-codes=CODES] [--filter-codes=CODES]\n           [--no-colors] [--no-source]\n           [--is-lib=DIR] [--psc=PSC] [--stash]\n           PSC_OPTIONS\n\nAvailable options:\n  -v,--version           Show the version number\n  -h,--help              Show this help text\n  --verbose-stats        Show counts for each warning type\n  --censor-warnings      Censor all warnings\n  --censor-lib           Censor warnings from library sources\n  --censor-src           Censor warnings from project sources\n  --censor-codes=CODES   Censor specific error codes\n  --filter-codes=CODES   Only show specific error codes\n  --no-colors            Disable ANSI colors\n  --no-source            Disable original source code printing\n  --strict               Promotes src warnings to errors\n  --stash                Enable persistent warnings (defaults to .psa-stash)\n  --stash=FILE           Enable persistent warnings using a specific stash file\n  --is-lib=DIR           Distinguishing library path (defaults to 'bower_components')\n  --psc=PSC              Name of psc executable (defaults to 'psc')\n\n  CODES                  Comma-separated list of psc error codes\n  PSC_OPTIONS            Any extra options are passed to psc\n";
var parseOptions = function (opts) {
    return function (args) {
        var isPrefix = function (s) {
            return function (str) {
                var $24 = Data_String.indexOf(s)(str);
                if ($24 instanceof Data_Maybe.Just && $24.value0 === 0) {
                    return true;
                };
                return false;
            };
        };
        var parse = function (p) {
            return function (arg) {
                if (arg === "--version" || arg === "-v") {
                    return Control_Apply["*>"](Control_Monad_Eff.applyEff)(Control_Monad_Eff_Console_1.log($foreign.version))(Node_Process_1.exit(0));
                };
                if (arg === "--help" || arg === "-h") {
                    return Control_Apply["*>"](Control_Monad_Eff.applyEff)(Control_Monad_Eff_Console_1.log(usage))(Node_Process_1.exit(0));
                };
                if (arg === "--stash") {
                    return Prelude.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $28 = {};
                        for (var $29 in p) {
                            if (p.hasOwnProperty($29)) {
                                $28[$29] = p[$29];
                            };
                        };
                        $28.stash = true;
                        return $28;
                    })());
                };
                if (arg === "--json-errors") {
                    return Prelude.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $30 = {};
                        for (var $31 in p) {
                            if (p.hasOwnProperty($31)) {
                                $30[$31] = p[$31];
                            };
                        };
                        $30.jsonErrors = true;
                        return $30;
                    })());
                };
                if (arg === "--no-source") {
                    return Prelude.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $32 = {};
                        for (var $33 in p) {
                            if (p.hasOwnProperty($33)) {
                                $32[$33] = p[$33];
                            };
                        };
                        $32.showSource = false;
                        return $32;
                    })());
                };
                if (arg === "--no-colors" || arg === "--monochrome") {
                    return Prelude.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $36 = {};
                        for (var $37 in p) {
                            if (p.hasOwnProperty($37)) {
                                $36[$37] = p[$37];
                            };
                        };
                        $36.opts = (function () {
                            var $34 = {};
                            for (var $35 in p.opts) {
                                if (p.opts.hasOwnProperty($35)) {
                                    $34[$35] = p.opts[$35];
                                };
                            };
                            $34.ansi = false;
                            return $34;
                        })();
                        return $36;
                    })());
                };
                if (arg === "--verbose-stats") {
                    return Prelude.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $40 = {};
                        for (var $41 in p) {
                            if (p.hasOwnProperty($41)) {
                                $40[$41] = p[$41];
                            };
                        };
                        $40.opts = (function () {
                            var $38 = {};
                            for (var $39 in p.opts) {
                                if (p.opts.hasOwnProperty($39)) {
                                    $38[$39] = p.opts[$39];
                                };
                            };
                            $38.verboseStats = true;
                            return $38;
                        })();
                        return $40;
                    })());
                };
                if (arg === "--strict") {
                    return Prelude.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $44 = {};
                        for (var $45 in p) {
                            if (p.hasOwnProperty($45)) {
                                $44[$45] = p[$45];
                            };
                        };
                        $44.opts = (function () {
                            var $42 = {};
                            for (var $43 in p.opts) {
                                if (p.opts.hasOwnProperty($43)) {
                                    $42[$43] = p.opts[$43];
                                };
                            };
                            $42.strict = true;
                            return $42;
                        })();
                        return $44;
                    })());
                };
                if (arg === "--censor-warnings") {
                    return Prelude.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $48 = {};
                        for (var $49 in p) {
                            if (p.hasOwnProperty($49)) {
                                $48[$49] = p[$49];
                            };
                        };
                        $48.opts = (function () {
                            var $46 = {};
                            for (var $47 in p.opts) {
                                if (p.opts.hasOwnProperty($47)) {
                                    $46[$47] = p.opts[$47];
                                };
                            };
                            $46.censorWarnings = true;
                            return $46;
                        })();
                        return $48;
                    })());
                };
                if (arg === "--censor-lib") {
                    return Prelude.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $52 = {};
                        for (var $53 in p) {
                            if (p.hasOwnProperty($53)) {
                                $52[$53] = p[$53];
                            };
                        };
                        $52.opts = (function () {
                            var $50 = {};
                            for (var $51 in p.opts) {
                                if (p.opts.hasOwnProperty($51)) {
                                    $50[$51] = p.opts[$51];
                                };
                            };
                            $50.censorLib = true;
                            return $50;
                        })();
                        return $52;
                    })());
                };
                if (arg === "--censor-lib") {
                    return Prelude.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $56 = {};
                        for (var $57 in p) {
                            if (p.hasOwnProperty($57)) {
                                $56[$57] = p[$57];
                            };
                        };
                        $56.opts = (function () {
                            var $54 = {};
                            for (var $55 in p.opts) {
                                if (p.opts.hasOwnProperty($55)) {
                                    $54[$55] = p.opts[$55];
                                };
                            };
                            $54.censorLib = true;
                            return $54;
                        })();
                        return $56;
                    })());
                };
                if (arg === "--censor-src") {
                    return Prelude.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $60 = {};
                        for (var $61 in p) {
                            if (p.hasOwnProperty($61)) {
                                $60[$61] = p[$61];
                            };
                        };
                        $60.opts = (function () {
                            var $58 = {};
                            for (var $59 in p.opts) {
                                if (p.opts.hasOwnProperty($59)) {
                                    $58[$59] = p.opts[$59];
                                };
                            };
                            $58.censorSrc = true;
                            return $58;
                        })();
                        return $60;
                    })());
                };
                if (isPrefix("--censor-codes=")(arg)) {
                    return Prelude.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $64 = {};
                        for (var $65 in p) {
                            if (p.hasOwnProperty($65)) {
                                $64[$65] = p[$65];
                            };
                        };
                        $64.opts = (function () {
                            var $62 = {};
                            for (var $63 in p.opts) {
                                if (p.opts.hasOwnProperty($63)) {
                                    $62[$63] = p.opts[$63];
                                };
                            };
                            $62.censorCodes = Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Set.insert(Prelude.ordString))(p.opts.censorCodes)(Data_String.split(",")(Data_String.drop(15)(arg)));
                            return $62;
                        })();
                        return $64;
                    })());
                };
                if (isPrefix("--filter-codes=")(arg)) {
                    return Prelude.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $68 = {};
                        for (var $69 in p) {
                            if (p.hasOwnProperty($69)) {
                                $68[$69] = p[$69];
                            };
                        };
                        $68.opts = (function () {
                            var $66 = {};
                            for (var $67 in p.opts) {
                                if (p.opts.hasOwnProperty($67)) {
                                    $66[$67] = p.opts[$67];
                                };
                            };
                            $66.filterCodes = Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Set.insert(Prelude.ordString))(p.opts.filterCodes)(Data_String.split(",")(Data_String.drop(15)(arg)));
                            return $66;
                        })();
                        return $68;
                    })());
                };
                if (isPrefix("--is-lib=")(arg)) {
                    return Prelude.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $72 = {};
                        for (var $73 in p) {
                            if (p.hasOwnProperty($73)) {
                                $72[$73] = p[$73];
                            };
                        };
                        $72.opts = (function () {
                            var $70 = {};
                            for (var $71 in p.opts) {
                                if (p.opts.hasOwnProperty($71)) {
                                    $70[$71] = p.opts[$71];
                                };
                            };
                            $70.libDirs = Data_Array.snoc(p.opts.libDirs)(Data_String.drop(9)(arg));
                            return $70;
                        })();
                        return $72;
                    })());
                };
                if (isPrefix("--psc=")(arg)) {
                    return Prelude.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $74 = {};
                        for (var $75 in p) {
                            if (p.hasOwnProperty($75)) {
                                $74[$75] = p[$75];
                            };
                        };
                        $74.psc = Data_String.drop(6)(arg);
                        return $74;
                    })());
                };
                if (isPrefix("--stash=")(arg)) {
                    return Prelude.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $76 = {};
                        for (var $77 in p) {
                            if (p.hasOwnProperty($77)) {
                                $76[$77] = p[$77];
                            };
                        };
                        $76.stash = true;
                        $76.stashFile = Data_String.drop(8)(arg);
                        return $76;
                    })());
                };
                if (Prelude.otherwise) {
                    return Prelude.pure(Control_Monad_Eff.applicativeEff)((function () {
                        var $78 = {};
                        for (var $79 in p) {
                            if (p.hasOwnProperty($79)) {
                                $78[$79] = p[$79];
                            };
                        };
                        $78.extra = Data_Array.snoc(p.extra)(arg);
                        return $78;
                    })());
                };
                throw new Error("Failed pattern match at Main line 75, column 1 - line 152, column 1: " + [ p.constructor.name, arg.constructor.name ]);
            };
        };
        var defaultLibDir = function (x) {
            if (Data_Array.length(x.opts.libDirs) === 0) {
                var $83 = {};
                for (var $84 in x) {
                    if (x.hasOwnProperty($84)) {
                        $83[$84] = x[$84];
                    };
                };
                $83.opts = (function () {
                    var $81 = {};
                    for (var $82 in x.opts) {
                        if (x.opts.hasOwnProperty($82)) {
                            $81[$82] = x.opts[$82];
                        };
                    };
                    $81.libDirs = [ "bower_components" ];
                    return $81;
                })();
                return $83;
            };
            if (Prelude.otherwise) {
                return x;
            };
            throw new Error("Failed pattern match at Main line 75, column 1 - line 152, column 1: " + [ x.constructor.name ]);
        };
        return Prelude["<$>"](Control_Monad_Eff.functorEff)(defaultLibDir)(Data_Array.foldM(Control_Monad_Eff.monadEff)(parse)({
            extra: [  ], 
            psc: "psc", 
            showSource: true, 
            stash: false, 
            stashFile: ".psa-stash", 
            jsonErrors: false, 
            opts: opts
        })(args));
    };
};
var defaultOptions = {
    ansi: true, 
    censorWarnings: false, 
    censorLib: false, 
    censorSrc: false, 
    censorCodes: Data_Set.empty, 
    filterCodes: Data_Set.empty, 
    verboseStats: false, 
    libDirs: [  ], 
    strict: false, 
    cwd: ""
};

/**
 *  Due to `catchException` label annoyingness
 */
var catchException$prime = function (eb) {
    return function (eff) {
        return Unsafe_Coerce.unsafeCoerce(Control_Monad_Eff_Exception.catchException(Unsafe_Coerce.unsafeCoerce(eb))(Unsafe_Coerce.unsafeCoerce(eff)));
    };
};
var main = (function () {
    
    /**
     *  TODO: Handle exceptions
     */
    var stdio = [ new Data_Maybe.Just(Node_ChildProcess_1.Pipe.value), Node_ChildProcess_1.inherit[1], new Data_Maybe.Just(Node_ChildProcess_1.Pipe.value) ];
    var spawn$prime = function (cmd) {
        return function (args) {
            return function (onExit) {
                return function __do() {
                    var v = Node_ChildProcess_1.spawn(cmd)(args)((function () {
                        var $85 = {};
                        for (var $86 in Node_ChildProcess_1.defaultSpawnOptions) {
                            if (Node_ChildProcess_1.defaultSpawnOptions.hasOwnProperty($86)) {
                                $85[$86] = Node_ChildProcess_1.defaultSpawnOptions[$86];
                            };
                        };
                        $85.stdio = stdio;
                        return $85;
                    })())();
                    var v1 = Control_Monad_ST_1.newSTRef("")();
                    Node_Stream.onDataString(Node_ChildProcess_1.stderr(v))(Node_Encoding.UTF8.value)(function (chunk) {
                        return Prelude["void"](Control_Monad_Eff.functorEff)(Control_Monad_ST_1.modifySTRef(v1)(function (v2) {
                            return v2 + chunk;
                        }));
                    })();
                    Node_ChildProcess_1.onExit(v)(function (status) {
                        if (status instanceof Node_ChildProcess_1.Normally) {
                            return function __do() {
                                Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_ST_1.readSTRef(v1))(onExit)();
                                return Node_Process_1.exit(status.value0)();
                            };
                        };
                        if (status instanceof Node_ChildProcess_1.BySignal) {
                            return function __do() {
                                Control_Monad_Eff_Console_1.error(Prelude.show(Data_Posix_Signal.showSignal)(status.value0))();
                                return Node_Process_1.exit(1)();
                            };
                        };
                        throw new Error("Failed pattern match at Main line 216, column 7 - line 223, column 5: " + [ status.constructor.name ]);
                    })();
                    return Node_ChildProcess_1.onError(v)(retryWithCmd(cmd)(args)(onExit))();
                };
            };
        };
    };
    var retryWithCmd = function (cmd) {
        return function (args) {
            return function (onExit) {
                return function (err) {
                    if (err.code === "ENOENT") {
                        var $96 = Prelude["=="](Node_Platform.eqPlatform)(Node_Process_1.platform)(Node_Platform.Win32.value);
                        if ($96) {
                            var $97 = Data_String.stripSuffix(".cmd")(cmd);
                            if ($97 instanceof Data_Maybe.Nothing) {
                                return spawn$prime(cmd + ".cmd")(args)(onExit);
                            };
                            if ($97 instanceof Data_Maybe.Just) {
                                return Control_Monad_Eff_Exception["throw"]("`" + ($97.value0 + ("` executable not found. (nor `" + (cmd + "`)"))));
                            };
                            throw new Error("Failed pattern match at Main line 230, column 10 - line 233, column 8: " + [ $97.constructor.name ]);
                        };
                        if (!$96) {
                            return Control_Monad_Eff_Exception["throw"]("`" + (cmd + "` executable not found."));
                        };
                        throw new Error("Failed pattern match at Main line 228, column 6 - line 235, column 5: " + [ $96.constructor.name ]);
                    };
                    if (Prelude.otherwise) {
                        return Control_Monad_Eff_Exception.throwException(Node_ChildProcess_1.toStandardError(err));
                    };
                    throw new Error("Failed pattern match at Main line 165, column 1 - line 284, column 1: " + [ cmd.constructor.name, args.constructor.name, onExit.constructor.name, err.constructor.name ]);
                };
            };
        };
    };
    var mergeWarnings = function (filenames) {
        return function (date) {
            return function (old) {
                return function ($$new) {
                    return function __do() {
                        var v = Data_StrMap_ST["new"]();
                        var v1 = Prelude.flip(Data_Array.filterM(Control_Monad_Eff.monadEff))(old)(function (x) {
                            if (x.filename instanceof Data_Maybe.Nothing) {
                                return Prelude.pure(Control_Monad_Eff.applicativeEff)(false);
                            };
                            if (x.filename instanceof Data_Maybe.Just) {
                                var $101 = Data_Set.member(Prelude.ordString)(x.filename.value0)(filenames);
                                if ($101) {
                                    return Prelude.pure(Control_Monad_Eff.applicativeEff)(false);
                                };
                                if (!$101) {
                                    return function __do() {
                                        var v1 = Data_StrMap_ST.peek(v)(x.filename.value0)();
                                        if (v1 instanceof Data_Maybe.Just) {
                                            return v1.value0;
                                        };
                                        if (v1 instanceof Data_Maybe.Nothing) {
                                            var v2 = catchException$prime(function (v2) {
                                                return Prelude.pure(Control_Monad_Eff.applicativeEff)(false);
                                            })(Prelude["<$>"](Control_Monad_Eff.functorEff)(function ($145) {
                                                return (function (v2) {
                                                    return Prelude[">"](Data_Date.ordDate)(date)(v2);
                                                })(Node_FS_Stats.modifiedTime($145));
                                            })(Node_FS_Sync.stat(x.filename.value0)))();
                                            Data_StrMap_ST.poke(v)(x.filename.value0)(v2)();
                                            return v2;
                                        };
                                        throw new Error("Failed pattern match at Main line 275, column 15 - line 282, column 5: " + [ v1.constructor.name ]);
                                    };
                                };
                                throw new Error("Failed pattern match at Main line 271, column 11 - line 282, column 5: " + [ $101.constructor.name ]);
                            };
                            throw new Error("Failed pattern match at Main line 268, column 7 - line 282, column 5: " + [ x.filename.constructor.name ]);
                        })();
                        return Prelude["<>"](Prelude.semigroupArray)(v1)($$new);
                    };
                };
            };
        };
    };
    var loadNothing = function (v) {
        return function (v1) {
            return Prelude.pure(Control_Monad_Eff.applicativeEff)(Data_Maybe.Nothing.value);
        };
    };
    var loadLines = function (files) {
        return function (filename) {
            return function (pos) {
                return function __do() {
                    var v = (function __do() {
                        var cache = Data_StrMap_ST.peek(files)(filename)();
                        if (cache instanceof Data_Maybe.Just) {
                            return cache.value0;
                        };
                        if (cache instanceof Data_Maybe.Nothing) {
                            var v = Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_String.split("\n"))(Node_FS_Sync.readTextFile(Node_Encoding.UTF8.value)(filename))();
                            Data_StrMap_ST.poke(files)(filename)(v)();
                            return v;
                        };
                        throw new Error("Failed pattern match at Main line 241, column 7 - line 247, column 5: " + [ cache.constructor.name ]);
                    })();
                    var source = Data_Array.slice(pos.startLine - 1)(pos.endLine)(v);
                    return new Data_Maybe.Just(source);
                };
            };
        };
    };
    var insertFilenames = Data_Foldable.foldr(Data_Foldable.foldableArray)(function (x) {
        return function (s) {
            return Data_Maybe.maybe(s)(Prelude.flip(Data_Set.insert(Prelude.ordString))(s))(x.filename);
        };
    });
    var encodeStash = function (s) {
        return Data_Argonaut_Encode.encodeJson(Data_Argonaut_Encode.encodeJsonArray(Data_Argonaut_Encode.encodeJsonJson))(Prelude["<$>"](Prelude.functorArray)(Psa_Types.encodePsaError)(s));
    };
    var writeStashFile = function (stashFile) {
        return function (warnings) {
            var file = Data_Argonaut_Printer.printJson(Data_Argonaut_Printer.printerString)(encodeStash(warnings));
            return Node_FS_Sync.writeTextFile(Node_Encoding.UTF8.value)(stashFile)(file);
        };
    };
    var emptyStash = Prelude["<$>"](Control_Monad_Eff.functorEff)(function (v) {
        return {
            date: v, 
            stash: [  ]
        };
    })(Data_Date.now);
    var decodeStash = function (s) {
        return Prelude[">>="](Data_Either.bindEither)(Prelude[">>="](Data_Either.bindEither)(Data_Argonaut_Parser.jsonParser(s))(Data_Argonaut_Decode.decodeJson(Data_Argonaut_Decode.decodeArray(Data_Argonaut_Decode.decodeStrMap(Data_Argonaut_Decode.decodeJsonJson)))))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Psa_Types.parsePsaError));
    };
    var readStashFile = function (stashFile) {
        return catchException$prime(Prelude["const"](emptyStash))(function __do() {
            var v = Node_FS_Sync.stat(stashFile)();
            var v1 = Node_FS_Sync.readTextFile(Node_Encoding.UTF8.value)(stashFile)();
            var $115 = decodeStash(v1);
            if ($115 instanceof Data_Either.Left) {
                return emptyStash();
            };
            if ($115 instanceof Data_Either.Right) {
                return {
                    date: Node_FS_Stats.modifiedTime(v), 
                    stash: $115.value0
                };
            };
            throw new Error("Failed pattern match at Main line 257, column 5 - line 261, column 3: " + [ $115.constructor.name ]);
        });
    };
    return Prelude["void"](Control_Monad_Eff.functorEff)(function __do() {
        var v = Node_Process_1.cwd();
        var v1 = Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Array.drop(2))(Node_Process_1.argv)();
        var v2 = parseOptions((function () {
            var $120 = {};
            for (var $121 in defaultOptions) {
                if (defaultOptions.hasOwnProperty($121)) {
                    $120[$121] = defaultOptions[$121];
                };
            };
            $120.cwd = v;
            return $120;
        })())(v1)();
        var opts$prime = (function () {
            var $123 = {};
            for (var $124 in v2.opts) {
                if (v2.opts.hasOwnProperty($124)) {
                    $123[$124] = v2.opts[$124];
                };
            };
            $123.libDirs = Prelude["<$>"](Prelude.functorArray)(function ($146) {
                return (function (v3) {
                    return v3 + Node_Path.sep;
                })(Node_Path.resolve([ v ])($146));
            })(v2.opts.libDirs);
            return $123;
        })();
        var args = Data_Array.cons("--json-errors")(v2.extra);
        var v3 = (function () {
            if (v2.stash) {
                return readStashFile(v2.stashFile);
            };
            if (!v2.stash) {
                return emptyStash;
            };
            throw new Error("Failed pattern match at Main line 182, column 5 - line 186, column 3: " + [ v2.stash.constructor.name ]);
        })()();
        return spawn$prime(v2.psc)(args)(function (buffer) {
            var stderr = Data_String.split("\n")(buffer);
            return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(stderr)(function (err) {
                var $127 = Prelude[">>="](Data_Either.bindEither)(Prelude[">>="](Data_Either.bindEither)(Data_Argonaut_Parser.jsonParser(err))(Data_Argonaut_Decode.decodeJson(Data_Argonaut_Decode.decodeStrMap(Data_Argonaut_Decode.decodeJsonJson))))(Psa_Types.parsePsaResult);
                if ($127 instanceof Data_Either.Left) {
                    return Control_Monad_Eff_Console_1.error(err);
                };
                if ($127 instanceof Data_Either.Right) {
                    return function __do() {
                        var v4 = Data_StrMap_ST["new"]();
                        var loadLinesImpl = (function () {
                            if (v2.showSource) {
                                return loadLines(v4);
                            };
                            if (!v2.showSource) {
                                return loadNothing;
                            };
                            throw new Error("Failed pattern match at Main line 193, column 31 - line 194, column 15: " + [ v2.showSource.constructor.name ]);
                        })();
                        var filenames = insertFilenames(insertFilenames(Data_Set.empty)($127.value0.errors))($127.value0.warnings);
                        var v5 = mergeWarnings(filenames)(v3.date)(v3.stash)($127.value0.warnings)();
                        Control_Monad.when(Control_Monad_Eff.monadEff)(v2.stash)(writeStashFile(v2.stashFile)(v5))();
                        var v6 = Psa_Output.output(Control_Monad_Eff.monadEff)(loadLinesImpl)(opts$prime)((function () {
                            var $132 = {};
                            for (var $133 in $127.value0) {
                                if ($127.value0.hasOwnProperty($133)) {
                                    $132[$133] = $127.value0[$133];
                                };
                            };
                            $132.warnings = v5;
                            return $132;
                        })())();
                        (function () {
                            if (v2.jsonErrors) {
                                return Psa_Printer_Json.print(v6);
                            };
                            if (!v2.jsonErrors) {
                                return Psa_Printer_Default.print(opts$prime)(v6);
                            };
                            throw new Error("Failed pattern match at Main line 198, column 11 - line 201, column 11: " + [ v2.jsonErrors.constructor.name ]);
                        })()();
                        var $136 = Data_StrMap.isEmpty(v6.stats.allErrors);
                        if ($136) {
                            return Node_Process_1.exit(0)();
                        };
                        if (!$136) {
                            return Node_Process_1.exit(1)();
                        };
                        throw new Error("Failed pattern match at Main line 201, column 11 - line 205, column 3: " + [ $136.constructor.name ]);
                    };
                };
                throw new Error("Failed pattern match at Main line 189, column 7 - line 205, column 3: " + [ $127.constructor.name ]);
            });
        })();
    });
})();
module.exports = {
    "catchException'": catchException$prime, 
    usage: usage, 
    main: main, 
    parseOptions: parseOptions, 
    defaultOptions: defaultOptions, 
    version: $foreign.version
};
