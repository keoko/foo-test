// Generated by psc version 0.8.5.0
"use strict";
var Prelude = require("../Prelude");
var Data_Foldable = require("../Data.Foldable");
var Data_Monoid = require("../Data.Monoid");
var Data_String = require("../Data.String");
var Data_Tuple = require("../Data.Tuple");
var Control_Apply = require("../Control.Apply");
var replicate = function (dictMonoid) {
    return function (n) {
        return function (m) {
            var go = function (__copy_i) {
                return function (__copy_x) {
                    var i = __copy_i;
                    var x = __copy_x;
                    tco: while (true) {
                        if (i <= 0) {
                            return x;
                        };
                        if (Prelude.otherwise) {
                            var __tco_i = i - 1;
                            var __tco_x = Prelude["<>"](dictMonoid["__superclass_Prelude.Semigroup_0"]())(x)(m);
                            i = __tco_i;
                            x = __tco_x;
                            continue tco;
                        };
                        throw new Error("Failed pattern match at Psa.Util line 11, column 1 - line 16, column 1: " + [ i.constructor.name, x.constructor.name ]);
                    };
                };
            };
            return go(n)(Data_Monoid.mempty(dictMonoid));
        };
    };
};
var padRight = function (width) {
    return function (str) {
        return str + replicate(Data_Monoid.monoidString)(width - Data_String.length(str))(" ");
    };
};
var padLeft = function (width) {
    return function (str) {
        return replicate(Data_Monoid.monoidString)(width - Data_String.length(str))(" ") + str;
    };
};
var iter_ = function (dictFoldable) {
    return function (dictApplicative) {
        return function (xs) {
            return function (f) {
                var go = function (v) {
                    return function (b) {
                        return new Data_Tuple.Tuple(v.value0 + 1 | 0, Control_Apply["<*"](dictApplicative["__superclass_Prelude.Apply_0"]())(v.value1)(f(v.value0)(b)));
                    };
                };
                return Data_Tuple.snd(Data_Foldable.foldl(dictFoldable)(go)(new Data_Tuple.Tuple(0, Prelude.pure(dictApplicative)(Prelude.unit)))(xs));
            };
        };
    };
};
module.exports = {
    iter_: iter_, 
    padRight: padRight, 
    padLeft: padLeft, 
    replicate: replicate
};
